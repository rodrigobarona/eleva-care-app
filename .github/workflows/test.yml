name: 🧪 Test Suite

on:
  push:
    branches: [main, develop]
  pull_request: # Runs on all PRs regardless of target branch

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  NODE_NO_WARNINGS: 1

jobs:
  setup:
    name: 🏗️ Setup
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.setup.outputs.node-version }}
      pnpm-version: ${{ steps.pnpm-version.outputs.version }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v4

      - name: 🔧 Setup Node.js
        id: setup
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 📦 Get PNPM version
        id: pnpm-version
        run: echo "version=$(pnpm --version)" >> $GITHUB_OUTPUT

  lint:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run ESLint
        run: pnpm lint

      - name: 💄 Check Prettier formatting
        run: pnpm format:check

  type-check:
    name: 📝 Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📝 Run TypeScript check
        run: npx tsc --noEmit

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        shard: [1, 2, 3]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests (Shard ${{ matrix.shard }})
        run: pnpm test:unit --shard=${{ matrix.shard }}/3 --coverage

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit-tests-shard-${{ matrix.shard }}
          name: Unit Tests Shard ${{ matrix.shard }}

  webhook-tests:
    name: 🪝 Webhook Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        webhook: [stripe, clerk, stripe-identity, stripe-connect]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🪝 Run webhook tests - ${{ matrix.webhook }}
        run: pnpm test tests/api/webhooks/${{ matrix.webhook }}.test.ts --coverage --verbose
        env:
          # Test environment variables
          STRIPE_SECRET_KEY: sk_test_fake_key_for_testing
          STRIPE_WEBHOOK_SECRET: whsec_test_fake_secret
          STRIPE_IDENTITY_WEBHOOK_SECRET: whsec_test_fake_identity_secret
          STRIPE_CONNECT_WEBHOOK_SECRET: whsec_test_fake_connect_secret
          CLERK_SECRET_KEY: sk_test_fake_clerk_secret
          NODE_ENV: test

      - name: 📊 Upload webhook coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: webhook-${{ matrix.webhook }}
          name: Webhook Tests - ${{ matrix.webhook }}

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🗄️ Setup test database
        run: |
          pnpm generate
          pnpm push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: 🔗 Run integration tests
        run: pnpm test:integration --coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test

      - name: 📊 Upload integration coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: integration-tests
          name: Integration Tests

  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build application
        run: pnpm build
        env:
          # Build-time environment variables
          SKIP_ENV_VALIDATION: true
          NEXT_SKIP_TYPESCRIPT_CHECK: true
          NODE_ENV: production

      - name: 🧪 Test built application starts
        run: |
          timeout 30s pnpm start &
          sleep 20
          curl -f http://localhost:3000/api/healthcheck || exit 1
        env:
          NODE_ENV: production

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Run security audit
        run: pnpm audit --audit-level moderate

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript

      - name: 🔍 Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs:
      [lint, type-check, unit-tests, webhook-tests, integration-tests, build-test, security-scan]
    if: always()
    steps:
      - name: 📊 Generate test summary
        run: |
          echo "# 🧪 Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | ${{ needs.lint.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | ${{ needs.type-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Webhook Tests | ${{ needs.webhook-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Test | ${{ needs.build-test.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🪝 Webhook Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Stripe Main Webhook: Payment processing, meeting creation, refunds" >> $GITHUB_STEP_SUMMARY
          echo "- Clerk Webhook: User management, authentication, email workflows" >> $GITHUB_STEP_SUMMARY
          echo "- Stripe Identity: Expert verification, onboarding progression" >> $GITHUB_STEP_SUMMARY
          echo "- Stripe Connect: Payment account setup, verification status" >> $GITHUB_STEP_SUMMARY

  notify-failure:
    name: 🚨 Notify on Failure
    runs-on: ubuntu-latest
    needs:
      [lint, type-check, unit-tests, webhook-tests, integration-tests, build-test, security-scan]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: 🚨 Create issue on main branch failure
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Main Branch Test Failure',
              body: `
              ## Test Suite Failed on Main Branch
              
              **Commit**: ${{ github.sha }}
              **Workflow**: ${{ github.workflow }}
              **Run ID**: ${{ github.run_id }}
              
              Please investigate and fix the failing tests immediately.
              
              [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `,
              labels: ['bug', 'urgent', 'ci-failure']
            });
            console.log('Created issue:', issue.data.html_url);
