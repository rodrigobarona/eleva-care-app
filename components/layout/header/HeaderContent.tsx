'use client';

import { useSmoothScroll } from '@/components/providers/SmoothScrollProvider';
import { Link, usePathname } from '@/lib/i18n/navigation';
import { useTranslations } from 'next-intl';
import { useEffect, useRef, useState } from 'react';

interface NavLinkProps {
  href: string;
  isScrolled: boolean;
  isRootPath: boolean;
  children: React.ReactNode;
}

const NavLink = ({ href, isScrolled, isRootPath, children }: NavLinkProps) => {
  const { scrollTo } = useSmoothScroll();
  const pathname = usePathname();

  const handleClick = (e: React.MouseEvent<HTMLAnchorElement>) => {
    // Check if it's a hash link
    if (href.includes('#')) {
      e.preventDefault();

      const [path, hash] = href.split('#');

      // Normalize paths for comparison (remove locale prefixes)
      const normalizeRoute = (route: string) => {
        return route.replace(/^\/[a-z]{2}(-[a-z]{2})?/, '') || '/';
      };

      const currentNormalizedPath = normalizeRoute(pathname);
      const targetNormalizedPath = normalizeRoute(path);

      console.log('ðŸ”— Header NavLink:', {
        href,
        currentPath: currentNormalizedPath,
        targetPath: targetNormalizedPath,
      });

      if (currentNormalizedPath === targetNormalizedPath) {
        // Same page - scroll with header-aware offset
        console.log('âœ… Header same-page scroll');
        scrollTo(`#${hash}`, { offset: -80 }); // Fine-tuned offset for header navigation
      } else {
        // Cross-page navigation - use router
        console.log('ðŸš€ Header cross-page navigation');
        window.location.href = href; // Use native navigation for more reliable cross-page
      }
    }
    // For other links, let Next.js handle them normally
  };

  return (
    <Link
      // @ts-expect-error - Allow hash-based navigation which isn't in the routing configuration
      href={href}
      onClick={handleClick}
      className={`rounded-full px-4 py-1 text-sm font-medium transition-colors hover:bg-white/10 hover:text-sidebar-accent-foreground ${
        isRootPath && !isScrolled ? 'text-white' : 'text-foreground'
      }`}
    >
      {children}
    </Link>
  );
};

interface ElevaLogoProps {
  className?: string;
  variant?: 'default' | 'white';
}

// Inline the logo SVG for better performance
const ElevaCareLogo = ({ className, variant = 'default' }: ElevaLogoProps) => (
  <svg
    width="1801"
    height="357"
    viewBox="0 0 1801 357"
    fill="currentColor"
    xmlns="http://www.w3.org/2000/svg"
    aria-label="ElevaCare Logo"
    role="img"
    className={className}
    style={{ color: variant === 'white' ? 'white' : 'currentColor' }}
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M0 179C0 266.128 70.872 337 158 337C245.128 337 316 266.128 316 179C316 91.872 245.128 21 158 21C70.872 21 0 91.872 0 179ZM9.888 179C9.888 97.36 76.308 30.94 158 30.94C179.223 30.94 199.422 35.4252 217.693 43.4988C137.948 170.504 106.364 267.618 93.7867 312.456C44.1787 288.489 9.888 237.66 9.888 179ZM119.861 322.135C134.784 241.19 210.45 79.5437 225.756 47.3573C273.431 71.9733 306.112 121.72 306.112 179C306.112 260.692 239.692 327.112 158 327.112C144.818 327.112 132.033 325.381 119.861 322.135ZM125.437 194.065C125.437 194.065 66.679 173.098 59.949 100.88C59.949 100.88 116.999 114.34 125.437 194.065ZM271.944 211.77C217.379 259.501 160.278 234.289 160.278 234.289C220.176 183.138 270.086 210.743 271.893 211.743C271.926 211.761 271.943 211.77 271.944 211.77ZM196.465 137.895C196.465 137.895 232.91 153.995 267.751 123.503C267.751 123.503 235.395 104.607 196.465 137.895ZM133.72 50.5092C137.499 89.1802 168.664 100.259 168.664 100.259C164.036 58.3022 134.728 50.7686 133.745 50.5159C133.728 50.5114 133.719 50.5092 133.72 50.5092ZM188.181 275.602C188.181 285.866 179.861 294.187 169.596 294.187C159.332 294.187 151.011 285.866 151.011 275.602C151.011 265.337 159.332 257.016 169.596 257.016C179.861 257.016 188.181 265.337 188.181 275.602ZM112.65 215.187C112.65 225.451 104.329 233.772 94.065 233.772C83.8 233.772 75.48 225.451 75.48 215.187C75.48 204.922 83.801 196.602 94.065 196.602C104.329 196.602 112.65 204.922 112.65 215.187Z"
    />
    <path d="M414.058 78.9H553.233V99.41H437.498V169.73H540.927V189.947H437.498V263.783H557.042V284H414.058V78.9ZM594.361 66.594H617.215V284H594.361V66.594ZM777.879 197.858C777.489 187.505 775.047 178.618 770.554 171.195C766.257 163.577 760.299 157.717 752.681 153.615C745.259 149.513 736.469 147.462 726.311 147.462C715.568 147.462 706.094 149.904 697.89 154.787C689.882 159.67 683.533 166.507 678.845 175.297C674.157 184.087 671.813 194.342 671.813 206.062C671.813 218.173 674.157 228.818 678.845 237.999C683.729 246.984 690.468 254.016 699.062 259.095C707.657 264.174 717.424 266.713 728.362 266.713C747.896 266.713 763.815 260.072 776.121 246.789L788.72 259.388C781.298 267.397 772.312 273.647 761.764 278.14C751.216 282.437 739.594 284.586 726.897 284.586C711.661 284.586 698.183 281.363 686.463 274.917C674.939 268.276 665.953 259.095 659.507 247.375C653.061 235.655 649.838 222.177 649.838 206.941C649.838 191.705 653.061 178.325 659.507 166.8C665.953 155.08 674.939 145.997 686.463 139.551C698.183 132.91 711.466 129.491 726.311 129.296C742.915 129.296 756.686 132.91 767.624 140.137C778.563 147.169 786.572 157.131 791.65 170.023C796.924 182.72 799.073 197.663 798.096 214.852H667.711V197.858H777.879ZM797.595 129.882H821.621L870.845 262.318L919.776 129.882H942.923L882.272 284H858.539L797.595 129.882ZM1004.85 211.629C991.957 211.629 982.19 213.778 975.549 218.075C968.908 222.372 965.587 228.916 965.587 237.706C965.587 246.496 968.712 253.626 974.963 259.095C981.409 264.369 990.101 267.006 1001.04 267.006C1010.03 267.006 1018.13 265.541 1025.36 262.611C1032.59 259.681 1038.54 255.481 1043.23 250.012C1048.12 244.543 1051.44 237.901 1053.19 230.088L1059.05 248.547C1053.58 260.853 1045.48 270.034 1034.74 276.089C1023.99 281.949 1011.3 284.879 996.645 284.879C986.097 284.879 976.819 282.828 968.81 278.726C960.997 274.624 954.941 269.057 950.644 262.025C946.347 254.993 944.198 247.082 944.198 238.292C944.198 225.009 949.277 214.461 959.434 206.648C969.591 198.835 983.753 194.83 1001.92 194.635H1056.71V211.629H1004.85ZM1052.61 184.38C1052.61 172.66 1049.09 163.577 1042.06 157.131C1035.22 150.685 1024.97 147.462 1011.3 147.462C1002.7 147.462 994.399 149.025 986.39 152.15C978.381 155.275 970.373 159.67 962.364 165.335L952.695 150.392C959.336 145.899 965.782 142.09 972.033 138.965C978.284 135.84 984.925 133.496 991.957 131.933C998.989 130.175 1006.9 129.296 1015.69 129.296C1034.83 129.296 1049.48 134.082 1059.64 143.653C1069.8 153.029 1074.97 165.921 1075.17 182.329L1075.46 284H1053.19L1052.61 184.38ZM1331.93 122.85C1324.12 114.841 1314.84 108.591 1304.09 104.098C1293.55 99.41 1282.61 97.066 1271.28 97.066C1259.75 97.066 1248.91 99.2147 1238.75 103.512C1228.6 107.809 1219.71 113.865 1212.09 121.678C1204.47 129.296 1198.52 138.184 1194.22 148.341C1189.92 158.498 1187.77 169.437 1187.77 181.157C1187.77 192.682 1189.92 203.523 1194.22 213.68C1198.52 223.837 1204.47 232.725 1212.09 240.343C1219.71 247.961 1228.6 254.016 1238.75 258.509C1248.91 262.806 1259.75 264.955 1271.28 264.955C1282.61 264.955 1293.45 262.806 1303.8 258.509C1314.35 254.016 1323.72 247.863 1331.93 240.05L1346.29 254.7C1339.64 260.951 1332.12 266.42 1323.72 271.108C1315.52 275.796 1306.93 279.41 1297.94 281.949C1288.96 284.488 1279.68 285.758 1270.11 285.758C1255.26 285.758 1241.39 283.121 1228.5 277.847C1215.8 272.378 1204.57 264.857 1194.8 255.286C1185.23 245.715 1177.71 234.581 1172.24 221.884C1166.77 209.187 1164.04 195.612 1164.04 181.157C1164.04 166.702 1166.77 153.224 1172.24 140.723C1177.71 128.222 1185.33 117.185 1195.1 107.614C1204.86 98.0427 1216.19 90.62 1229.09 85.346C1241.98 80.072 1255.94 77.435 1270.98 77.435C1280.36 77.435 1289.54 78.607 1298.53 80.951C1307.51 83.295 1316.01 86.7133 1324.02 91.206C1332.03 95.5033 1339.35 100.777 1345.99 107.028L1331.93 122.85ZM1423.99 211.629C1411.1 211.629 1401.33 213.778 1394.69 218.075C1388.05 222.372 1384.73 228.916 1384.73 237.706C1384.73 246.496 1387.85 253.626 1394.1 259.095C1400.55 264.369 1409.24 267.006 1420.18 267.006C1429.16 267.006 1437.27 265.541 1444.5 262.611C1451.73 259.681 1457.68 255.481 1462.37 250.012C1467.25 244.543 1470.57 237.901 1472.33 230.088L1478.19 248.547C1472.72 260.853 1464.62 270.034 1453.87 276.089C1443.13 281.949 1430.43 284.879 1415.78 284.879C1405.24 284.879 1395.96 282.828 1387.95 278.726C1380.14 274.624 1374.08 269.057 1369.78 262.025C1365.49 254.993 1363.34 247.082 1363.34 238.292C1363.34 225.009 1368.42 214.461 1378.57 206.648C1388.73 198.835 1402.89 194.83 1421.06 194.635H1475.85V211.629H1423.99ZM1471.75 184.38C1471.75 172.66 1468.23 163.577 1461.2 157.131C1454.36 150.685 1444.11 147.462 1430.43 147.462C1421.84 147.462 1413.54 149.025 1405.53 152.15C1397.52 155.275 1389.51 159.67 1381.5 165.335L1371.83 150.392C1378.48 145.899 1384.92 142.09 1391.17 138.965C1397.42 135.84 1404.06 133.496 1411.1 131.933C1418.13 130.175 1426.04 129.296 1434.83 129.296C1453.97 129.296 1468.62 134.082 1478.78 143.653C1488.94 153.029 1494.11 165.921 1494.31 182.329L1494.6 284H1472.33L1471.75 184.38ZM1615.07 150.099C1603.54 149.904 1593.58 152.345 1585.18 157.424C1576.98 162.307 1570.63 169.242 1566.14 178.227C1561.64 187.017 1559.4 197.37 1559.4 209.285L1551.49 208.406C1551.49 191.607 1554.03 177.348 1559.1 165.628C1564.18 153.908 1571.51 144.923 1581.08 138.672C1590.65 132.421 1601.98 129.296 1615.07 129.296V150.099ZM1536.84 129.882H1559.69V284H1536.84V129.882ZM1749.57 197.858C1749.18 187.505 1746.74 178.618 1742.25 171.195C1737.95 163.577 1731.99 157.717 1724.38 153.615C1716.95 149.513 1708.16 147.462 1698.01 147.462C1687.26 147.462 1677.79 149.904 1669.59 154.787C1661.58 159.67 1655.23 166.507 1650.54 175.297C1645.85 184.087 1643.51 194.342 1643.51 206.062C1643.51 218.173 1645.85 228.818 1650.54 237.999C1655.42 246.984 1662.16 254.016 1670.76 259.095C1679.35 264.174 1689.12 266.713 1700.06 266.713C1719.59 266.713 1735.51 260.072 1747.82 246.789L1760.42 259.388C1752.99 267.397 1744.01 273.647 1733.46 278.14C1722.91 282.437 1711.29 284.586 1698.59 284.586C1683.36 284.586 1669.88 281.363 1658.16 274.917C1646.63 268.276 1637.65 259.095 1631.2 247.375C1624.76 235.655 1621.53 222.177 1621.53 206.941C1621.53 191.705 1624.76 178.325 1631.2 166.8C1637.65 155.08 1646.63 145.997 1658.16 139.551C1669.88 132.91 1683.16 129.491 1698.01 129.296C1714.61 129.296 1728.38 132.91 1739.32 140.137C1750.26 147.169 1758.27 157.131 1763.35 170.023C1768.62 182.72 1770.77 197.663 1769.79 214.852H1639.41V197.858H1749.57Z" />
  </svg>
);

export function HeaderContent() {
  const [isScrolled, setIsScrolled] = useState(false);
  const pathname = usePathname();
  const t = useTranslations('Header');
  const scrollRef = useRef<boolean>(false);

  // Check if we're on the homepage, including locale-prefixed routes
  // This handles paths like /, /pt, /es, /br, etc. as homepage equivalents
  const isRootPath = pathname === '/' || /^\/[a-z]{2}(-[a-z]{2})?$/.test(pathname);

  useEffect(() => {
    const handleScroll = () => {
      const shouldBeScrolled = window.scrollY > 0;
      if (scrollRef.current !== shouldBeScrolled) {
        scrollRef.current = shouldBeScrolled;
        setIsScrolled(shouldBeScrolled);
      }
    };

    // Check initial scroll position
    handleScroll();

    // Add scroll event listener with passive option for better performance
    window.addEventListener('scroll', handleScroll, { passive: true });

    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  return (
    <header
      className={`fixed z-50 w-full justify-between px-6 transition-all lg:px-8 ${
        isRootPath && !isScrolled
          ? 'bg-transparent pb-4 pt-6'
          : 'bg-white/20 pb-2 pt-2 backdrop-blur-md'
      }`}
    >
      <div className="mx-auto flex max-w-2xl lg:max-w-7xl">
        <Link
          href="/"
          className={`h-8 w-auto lg:h-12 ${
            isRootPath && !isScrolled ? 'text-white' : 'text-foreground'
          }`}
        >
          <ElevaCareLogo
            className="h-8 w-auto lg:h-12"
            variant={isRootPath && !isScrolled ? 'white' : 'default'}
          />
        </Link>
        <nav className="ml-auto flex items-center gap-4 sm:gap-6">
          <NavLink href="/#experts" isScrolled={isScrolled} isRootPath={isRootPath}>
            {t('findExpert')}
          </NavLink>
          <NavLink href="/about" isScrolled={isScrolled} isRootPath={isRootPath}>
            {t('mission')}
          </NavLink>
        </nav>
      </div>
    </header>
  );
}
