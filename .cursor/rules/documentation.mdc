---
description: Documentation Rule: JSDoc + MDX Generation for Interactive Docs
globs: 
alwaysApply: false
---
# Documentation Rule: JSDoc + MDX Generation for Interactive Docs

## Semantic Description
This rule directs the AI to:
- **Document Code Inline:**  
  Ensure every function, class, and module in files with extensions `.js`, `.ts`, `.jsx`, and `.tsx` is thoroughly documented using JSDoc comments. These comments must include descriptions, parameter details, return types, and usage examples (using tags like `@param`, `@returns`, and `@example`).

- **Generate MDX Files:**  
  For each documented code file, automatically generate a corresponding `.mdx` file (placed in a designated documentation folder, e.g., `docs/api/`) that extracts and structures the documentation. Each MDX file should include:
  - A **Title** (module or file name).
  - An **Overview** summarizing the file’s purpose.
  - An **API Section** that details each documented symbol (functions, classes, methods) along with their parameters, return values, and inline examples.
  - **Code Examples** rendered in syntax-highlighted blocks.
  
- **Integration with Documentation Platforms:**  
  The MDX files must be formatted to work seamlessly with platforms like Fumadocs or Mintlify, allowing for interactive and navigable documentation.

## File Pattern Matching
- **Applies to Code Files:**  
  All files matching extensions `.js`, `.ts`, `.jsx`, and `.tsx` that include JSDoc comments.
- **Documentation Output:**  
  For each such code file, an MDX file with the same base name should be generated. For example, for `src/utils/math.ts`, generate a file like `docs/api/utils/math.mdx`.

## Rule Details & Examples

### 1. Inline JSDoc Comments
- **Example:**
  ```ts
  /**
   * Adds two numbers together.
   *
   * @param {number} a - The first number.
   * @param {number} b - The second number.
   * @returns {number} The sum of a and b.
   *
   * @example
   * const result = add(2, 3);
   * // result is 5
   */
  export function add(a: number, b: number): number {
    return a + b;
  }
  ```
  > *Inline Note:* Ensure each public function and class is documented with all relevant tags.

### 2. Auto-generated MDX Documentation File
- **MDX Template Structure:**
  - **Front Matter:**  
    Include metadata (e.g., title) in the MDX front matter.
  - **Overview Section:**  
    Provide a summary of the module’s purpose.
  - **API Documentation:**  
    For each function or class, extract the JSDoc details into a structured section.
  - **Examples:**  
    Render code examples in fenced code blocks.
- **Example MDX Template:**
  ```mdx
  ---
  title: "Math Utilities"
  ---

  # Math Utilities Module

  This module provides various mathematical utility functions.

  ## API Documentation

  ### `add(a: number, b: number): number`
  Adds two numbers together.

  **Parameters:**
  - **a:** The first number.
  - *ber.

  - The sum of `a` and `b`.

  **Example:**
  ```ts
  import { add } from 'src/utils/math';

  const sum = add(2, 3);
  console.log(sum); // 5
  ```
  ```
  > *Inline Note:* The MDX file should follow a consistent template so that platforms like Fumadocs or Mintlify can render them uniformly.

## Automatic Attachment & References
- **Trigger:**  
  When a code file with JSDoc comments is saved or updated, automatically generate/update the corresponding MDX file in the designated documentation folder.
- **Tooling Suggestions:**  
  Consider using tools such as `jsdoc-to-markdown` to generate Markdown output from JSDoc comments and then post-process it into MDX format.
- **References:**  
  - [JSDoc Documentation](mdc:https:/jsdoc.app)
  - [jsdoc-to-markdown GitHub](mdc:https:/github.com/jsdoc2md/jsdoc-to-markdown)
  - [Fumadocs](mdc:https:/fumadocs.com)
  - [Mintlify](mdc:https:/mintlify.com)

## Additional Guidelines
- **Consistency:**  
  Ensure that both inline comments and generated MDX files follow the same documentation style and template.
- **Automation:**  
  MDX files should be automatically regenerated whenever the corresponding code file is modified.
- **Customization:**  
  Allow for manual additions in the MDX files for extra context that may not be captured by inline JSDoc comments.
- **Quality:**  
  All generated documentation must be clear, concise, and helpful to both new and experienced developers.
