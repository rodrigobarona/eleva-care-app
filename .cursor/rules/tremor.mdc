# Tremor Rule: Dashboard and Data Visualization Standards

## Overview

This rule establishes [Tremor.so](https://tremor.so/) as the standard library for all dashboard interfaces, data visualizations, and analytical components within the Eleva Care application. Tremor provides 35+ accessible, React-based components built with Tailwind CSS and Radix UI to create professional-grade dashboards and data experiences.

## Why Tremor?

- **Dashboard-specific components**: Specialized for analytical interfaces and data presentation
- **Accessibility**: Built on Radix UI primitives ensuring WCAG compliance
- **Tailwind CSS integration**: Seamless integration with our existing styling approach
- **Modern design**: Beautiful defaults with simple props for customization
- **Comprehensive ecosystem**: Charts, KPI cards, data tables, filters, and more
- **Active development**: Recently joined Vercel, ensuring long-term support
- **Production-ready**: Used by many companies including Cal.com and Vercel

## Installation & Setup

```bash
npm install @tremor/react
```

For customizing Tremor's colors to match our theme, add this to your tailwind.config.js:

```javascript
// tailwind.config.js
module.exports = {
  // ...other config
  content: [
    // ...other content paths
    "./node_modules/@tremor/**/*.{js,ts,jsx,tsx}",
  ],
}
```

## Core Components

### Dashboard Layouts
- `<Card>`: Container for dashboard elements
- `<Grid>`: Responsive grid layout system
- `<Flex>`: Flexible layout component
- `<Metric>`: Highlighted KPI numbers
- `<Title>`, `<Text>`: Typography components

### Charts
- `<AreaChart>`: For time series and cumulative data
- `<BarChart>`: For comparing categorical data
- `<DonutChart>`: For part-to-whole relationships
- `<LineChart>`: For continuous data trends
- `<ScatterChart>`: For correlation analysis

### Data Display
- `<Table>`: For structured data presentation
- `<List>`: For simple data lists
- `<ProgressBar>`: For completion metrics
- `<Tracker>`: For status tracking
- `<BadgeDelta>`: For indicating changes

### Data Input & Filtering
- `<DateRangePicker>`: For selecting date ranges
- `<MultiSelect>`: For selecting multiple options
- `<RangeSlider>`: For selecting numeric ranges
- `<SearchSelect>`: For searching and selecting options
- `<Select>`: For selecting a single option
- `<Switch>`: For toggling options

## Usage Guidelines

### When to Use Tremor

- **Always use** for all dashboard pages, analytics views, and data visualization needs
- **Always use** for metrics display, KPIs, and executive dashboards
- **Always use** for filtering and interactive data exploration interfaces
- **Always use** for data tables with sorting, filtering, or pagination

### Integration with Existing Components

- Tremor components should be used alongside our existing shadcn/ui components
- For general UI elements like buttons, forms, modals use shadcn/ui
- For data visualization, charts, metrics, and dashboards use Tremor
- Both libraries use Radix UI primitives and Tailwind CSS, ensuring compatibility

### Best Practices

1. **Use meaningful colors**:
   ```jsx
   <DonutChart
     data={chartData}
     category="value"
     index="name"
     colors={["emerald", "rose", "amber"]}
   />
   ```

2. **Always format values appropriately**:
   ```jsx
   <BarChart
     data={data}
     valueFormatter={(value) => `$${(value / 1000).toFixed(1)}k`}
   />
   ```

3. **Use proper loading states**:
   ```jsx
   {isLoading ? (
     <Skeleton className="h-[350px] w-full" />
   ) : (
     <LineChart data={data} categories={["Revenue"]} index="month" />
   )}
   ```

4. **Ensure responsive designs**:
   ```jsx
   <Grid numItemsMd={2} numItemsLg={3} className="gap-6">
     <Card>/* Content */</Card>
     <Card>/* Content */</Card>
     <Card>/* Content */</Card>
   </Grid>
   ```

5. **Implement error handling**:
   ```jsx
   {data ? (
     <AreaChart data={data} categories={["Metrics"]} index="date" />
   ) : error ? (
     <ErrorComponent message="Failed to load chart data" />
   ) : null}
   ```

## Accessibility Requirements

- **Color contrast**: Ensure all chart colors meet WCAG AA contrast requirements
- **Screen readers**: Include proper ARIA labels for all charts
- **Keyboard navigation**: Ensure all interactive elements are keyboard accessible
- **Text alternatives**: Provide textual summaries for key insights from charts
- **Responsive design**: All dashboards must be responsive on all device sizes

## Example Component: Dashboard KPI Card

```jsx
import { Card, Metric, Text, Flex, BadgeDelta } from "@tremor/react";

export function KpiCard({ title, metric, delta }) {
  return (
    <Card className="max-w-xs mx-auto">
      <Flex justifyContent="between" alignItems="center">
        <Text>{title}</Text>
        <BadgeDelta deltaType={delta >= 0 ? "increase" : "decrease"}>
          {delta}%
        </BadgeDelta>
      </Flex>
      <Metric className="mt-2">{metric}</Metric>
    </Card>
  );
}
```

## Example: Analytics Dashboard

```jsx
import { Card, Grid, Title, LineChart, BarList, DonutChart, Flex } from "@tremor/react";

export function AnalyticsDashboard({ data }) {
  return (
    <div className="space-y-6">
      <Title>Care Analytics Dashboard</Title>

      <Grid numItemsMd={2} numItemsLg={3} className="gap-6">
        {/* KPI Cards */}
        <KpiCard 
          title="Patients Onboarded" 
          metric="1,284" 
          delta={12.3} 
        />
        <KpiCard 
          title="Avg Session Duration" 
          metric="42.3 min" 
          delta={-2.1} 
        />
        <KpiCard 
          title="Care Completion Rate" 
          metric="94.2%" 
          delta={3.4} 
        />
      </Grid>

      <Grid numItemsMd={2} className="gap-6 mt-6">
        {/* Charts */}
        <Card>
          <Title>Patient Sessions Over Time</Title>
          <LineChart 
            data={data.sessionsByMonth} 
            index="month"
            categories={["newPatients", "returningPatients"]} 
            colors={["emerald", "blue"]} 
            valueFormatter={(v) => `${v} sessions`}
            className="mt-6 h-72"
          />
        </Card>
        <Card>
          <Title>Care Plan Distribution</Title>
          <DonutChart 
            data={data.carePlanDistribution} 
            category="value" 
            index="name"
            colors={["violet", "indigo", "rose", "cyan", "amber"]} 
            className="mt-6 h-72"
          />
        </Card>
      </Grid>
    </div>
  );
}
```

## References

- [Tremor Documentation](https://www.tremor.so/docs)
- [Tremor GitHub Repository](https://github.com/tremorlabs/tremor)
- [Tremor Blocks & Templates](https://www.tremor.so/blocks) 