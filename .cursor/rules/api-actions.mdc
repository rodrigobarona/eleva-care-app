---
description: Create/update api endpoints and actions
globs: 
---
# API, Server Actions, and Mutations Rule for Next.js 14 with App Router

## Semantic Description
This rule instructs the AI to generate production‑ready code for handling APIs, server actions, and mutations in a Next.js 14 application that uses the App Router. The code should:
- Follow Next.js 14 conventions for the App Router by placing API endpoints within the `/app/api/` directory.
- Use Next.js Server Actions for mutations and data-changing operations. Server actions must include the `"use server"` directive.
- Implement proper HTTP methods (GET, POST, PUT, DELETE, etc.) and adhere to RESTful practices where applicable.
- Include robust error handling, input validation, and security measures (e.g., authentication, CSRF protection).
- Be written in TypeScript when possible, ensuring clear type definitions for request and response data.

## File Pattern Matching
- **Applies to files located in:**
  - `/app/api/**` – for Next.js API routes.
  - `/app/` files that contain server actions (indicated by the `"use server"` directive).
- **Triggers:**
  - Any file or endpoint referencing API logic, server mutations, or data-changing actions.

## Rule Details & Examples

### 1. API Endpoints in `/app/api/`
- **Guidelines:**
  - Use file-based routing to define endpoints.
  - Implement handlers using HTTP methods.
  - Use built‑in Next.js utilities (like `NextResponse`) for handling responses.
  - Ensure each endpoint validates input and manages errors appropriately.
- **Example:**
  ```ts
  // app/api/appointments/route.ts
  import { NextResponse } from 'next/server';

  // GET /api/appointments
  export async function GET(request: Request) {
    try {
      const appointments = await fetchAppointments(); // custom function to fetch data
      return NextResponse.json(appointments);
    } catch (error) {
      return NextResponse.error();
    }
  }

  // POST /api/appointments
  export async function POST(request: Request) {
    try {
      const data = await request.json();
      // Validate and process data here
      const newAppointment = await createAppointment(data); // custom function to create data
      return NextResponse.json(newAppointment, { status: 201 });
    } catch (error) {
      return NextResponse.json({ error: 'Failed to create appointment' }, { status: 400 });
    }
  }
  ```
  > *Inline Note:* Use proper input validation and error handling to ensure robust API behavior.

### 2. Server Actions for Mutations
- **Guidelines:**
  - In server actions, include the `"use server"` directive at the top of the file.
  - Define functions that perform mutations or other side effects.
  - Server actions can be invoked from client components via form submissions or fetch requests.
- **Example:**
  ```ts
  // app/actions/meetings.ts
  'use server';

  /**
   * Creates a new meeting.
   *
   * @param {object} data - The meeting data.
   * @param {string} data.title - The meeting title.
   * @param {string} data.date - The meeting date.
   * @returns {Promise<object>} The created meeting object.
   *
   * @example
   * const meeting = await createMeeting({ title: "Team Sync", date: "2025-02-20" });
   */
  export async function createMeeting(data: { title: string; date: string }): Promise<object> {
    // Validate data and perform server-side mutation
    const result = await database.insertMeeting(data); // custom database operation
    return result;
  }
  ```
  > *Inline Note:* Ensure the "use server" directive is the first line to mark the file as a server action file.

### 3. Best Practices & Security
- **General Guidelines:**
  - Use TypeScript for strict typing of request bodies and response objects.
  - Secure sensitive endpoints (e.g., using authentication middleware or verifying tokens).
  - Document the endpoint’s purpose, parameters, and potential error responses using JSDoc comments.
  - Organize endpoints and actions in directories that reflect their responsibilities (e.g., grouping related API endpoints under `/app/api/appointments/`).

## Automatic Attachment & References
- **Automatic Inclusion:**
  - This rule should automatically be attached to any file in `/app/api/` or files containing server actions with the `"use server"` directive.
- **References:**
  - [Next.js 14 App Router Documentation](https://nextjs.org/docs/app)
  - [NextResponse API](https://nextjs.org/docs/app/api-reference/next/server#nextresponse)
  - [Server Actions in Next.js](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions)

## Additional Guidelines
- **Testing:**
  - Ensure to include unit and integration tests for API endpoints and server actions using a tool like Jest.
- **Performance:**
  - Optimize endpoints to leverage Next.js caching mechanisms where applicable.
- **Code Modularity:**
  - Break down complex operations into smaller helper functions.
- **Documentation:**
  - Each endpoint and server action should be documented with JSDoc comments, including `@param`, `@returns`, and `@example` tags to facilitate maintainability.
