---
description:
globs:
alwaysApply: false
---

# Rules Organization and Configuration Guide

## Rule Types

Each rule file must have a frontmatter configuration at the top of the file:

```markdown
---
description: Brief description of what this rule covers
type: "always" | "auto" | "agent" | "manual"
globs: ["pattern1", "pattern2"]  # For auto-attached rules
alwaysApply: boolean            # For always-included rules
---
```

### Type Definitions

1. **Always (`type: "always")`)**
   - Always included in the model context
   - Set `alwaysApply: true`
   - Example: General coding standards

2. **Auto-Attached (`type: "auto")`)**
   - Included when files matching glob patterns are referenced
   - Requires `globs` array
   - Example: Component patterns for UI files

3. **Agent-Requested (`type: "agent")`)**
   - Available to AI for inclusion when relevant
   - Requires clear description
   - Example: Specific implementation patterns

4. **Manual (`type: "manual")`)**
   - Only included when explicitly referenced
   - Example: Project-specific guidelines

## Directory Structure

```
.cursor/rules/
├── core/                 # Core development rules
├── ui/                  # UI/UX rules
├── infrastructure/      # Infrastructure rules
├── security/           # Security rules
├── testing/            # Testing rules
└── documentation/      # Documentation rules
```

## Rule Configuration Examples

### 1. Always-Applied Rule

```markdown
---
description: 'General project rules and coding standards'
type: 'always'
alwaysApply: true
---
```

### 2. Auto-Attached Rule

```markdown
---
description: 'Component development patterns'
type: 'auto'
globs: ['components/**/*.tsx', 'components/**/*.ts']
---
```

### 3. Agent-Requested Rule

```markdown
---
description: 'Database query optimization patterns'
type: 'agent'
---
```

### 4. Manual Rule

```markdown
---
description: 'Project-specific deployment procedures'
type: 'manual'
---
```

## Rule Categories

1. **Core Development**
   - `general-rules.mdc` (always)
   - `api-actions.mdc` (auto: api/\*\*)
   - `architecture.mdc` (always)
   - `error-handling.mdc` (auto: \*_/error.ts_)
   - `performance.mdc` (agent)
   - `url-structure.mdc` (agent: legal/\*\*, trust/\*\*, middleware.ts)

2. **UI/UX**
   - `atomic-design.mdc` (auto: components/\*\*)
   - `design-accessibility.mdc` (auto: components/\*\*)
   - `tremor.mdc` (auto: **/dashboard/**)

3. **Infrastructure**
   - `database.mdc` (auto: drizzle/**, schema/**)
   - `integrations.mdc` (auto: lib/\*\*)
   - `neon-drizzler.mdc` (auto: drizzle/\*\*)

4. **Security**
   - `clerk.mdc` (auto: **/auth/**)
   - `stripe.mdc` (auto: **/payment/**)
   - `privacy-compliance.mdc` (always)
   - `botid-vercel.mdc` (agent: **/botid/**, instrumentation-client.ts, middleware.ts)

5. **Testing**
   - `testing-guidelines.mdc` (auto: \*_/_.test.\*)
   - `component-testing.mdc` (auto: components/\*_/_.test.\*)
   - `server-action-testing.mdc` (auto: server/actions/\*\*)

6. **Documentation**
   - `documentation.mdc` (auto: docs/\*\*)
   - `api-documentation.mdc` (auto: api/\*\*)

## Best Practices

1. Always include frontmatter configuration
2. Use appropriate rule types
3. Keep rules focused and specific
4. Include examples and patterns
5. Update rules as patterns evolve
6. Document rule dependencies
7. Use glob patterns effectively
8. Keep rules maintainable

## Usage

- Use `@ruleName` to reference specific rules
- Rules can be nested in subdirectories for domain-specific guidance
- Rules are version-controlled and should be reviewed during code reviews
- Generate new rules using the Cursor command palette: `Cmd + Shift + P > "New Cursor Rule"`
