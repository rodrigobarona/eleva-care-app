---
description:
globs:
alwaysApply: false
---
# Atomic Design Pattern Implementation

## Directory Structure

```
components/
├── atoms/          # Basic building blocks
├── molecules/      # Combinations of atoms
├── organisms/      # Complex UI components
├── emails/         # Email templates
├── analytics/      # Analytics components
└── auth/           # Authentication components
```

## Component Organization

### 1. Atoms
Basic, indivisible components that serve as building blocks.

```typescript
// components/atoms/Button/Button.tsx
export interface ButtonProps {
  variant: 'primary' | 'secondary' | 'ghost';
  size: 'sm' | 'md' | 'lg';
  children: React.ReactNode;
}

export function Button({ variant, size, children }: ButtonProps) {
  return (
    <button
      className={cn(
        buttonVariants({ variant, size })
      )}
    >
      {children}
    </button>
  );
}
```

### 2. Molecules
Combinations of atoms that form simple UI components.

```typescript
// components/molecules/FormField/FormField.tsx
export interface FormFieldProps {
  label: string;
  error?: string;
  children: React.ReactNode;
}

export function FormField({ label, error, children }: FormFieldProps) {
  return (
    <div className="space-y-2">
      <Label>{label}</Label>
      {children}
      {error && <ErrorMessage>{error}</ErrorMessage>}
    </div>
  );
}
```

### 3. Organisms
Complex UI components composed of molecules and/or atoms.

```typescript
// components/organisms/AppointmentForm/AppointmentForm.tsx
export function AppointmentForm() {
  return (
    <Form>
      <FormField label="Date">
        <DatePicker />
      </FormField>
      <FormField label="Time">
        <TimePicker />
      </FormField>
      <Button variant="primary">Book Appointment</Button>
    </Form>
  );
}
```

## Best Practices

1. **Component Structure**
   ```
   ComponentName/
   ├── index.ts           # Export file
   ├── ComponentName.tsx  # Main component
   ├── ComponentName.test.tsx
   └── types.ts          # Type definitions
   ```

2. **Props Interface**
   ```typescript
   export interface ComponentNameProps {
     // Required props first
     required: string;
     // Optional props second
     optional?: string;
     // Callback props last
     onChange?: (value: string) => void;
   }
   ```

3. **Component Documentation**
   ```typescript
   /**
    * ComponentName description
    * 
    * @example
    * ```tsx
    * <ComponentName
    *   required="value"
    *   optional="value"
    * />
    * ```
    */
   export function ComponentName({ required, optional }: ComponentNameProps) {
     // ...
   }
   ```

## Validation Rules

1. **Atoms**
   - Must be the smallest possible unit
   - Should be highly reusable
   - Should accept minimal props
   - Should be stateless when possible

2. **Molecules**
   - Should combine only atoms
   - Should have a single responsibility
   - Can maintain minimal state
   - Should be context-independent

3. **Organisms**
   - Can combine atoms and molecules
   - Can maintain complex state
   - Can be context-aware
   - Should be focused on a specific domain

4. **General Rules**
   - Use TypeScript for all components
   - Implement proper prop validation
   - Write comprehensive tests
   - Document usage examples
   - Follow accessibility guidelines

## Special Components

### 1. Email Templates
```typescript
// components/emails/AppointmentConfirmation.tsx
export function AppointmentConfirmation({
  appointment,
  expert,
}: AppointmentEmailProps) {
  return (
    <EmailTemplate>
      <Heading>Appointment Confirmed</Heading>
      <Text>Your appointment with {expert.name} is confirmed.</Text>
      <Button href={appointment.joinUrl}>Join Meeting</Button>
    </EmailTemplate>
  );
}
```

### 2. Analytics Components
```typescript
// components/analytics/EventTracker.tsx
export function EventTracker({
  eventName,
  properties,
  children,
}: EventTrackerProps) {
  return (
    <PostHogProvider>
      <PostHogCapture
        eventName={eventName}
        properties={properties}
      >
        {children}
      </PostHogCapture>
    </PostHogProvider>
  );
}
```

### 3. Authentication Components
```typescript
// components/auth/SignInForm.tsx
export function SignInForm() {
  return (
    <Form>
      <FormField label="Email">
        <Input type="email" />
      </FormField>
      <FormField label="Password">
        <Input type="password" />
      </FormField>
      <Button>Sign In</Button>
    </Form>
  );
}
```

## Testing Guidelines

1. **Unit Tests**
   - Test each component in isolation
   - Test all prop combinations
   - Test error states
   - Test accessibility

2. **Integration Tests**
   - Test component combinations
   - Test user interactions
   - Test data flow
   - Test error handling

3. **Visual Tests**
   - Test component appearance
   - Test responsive behavior
   - Test animations
   - Test theme variations
