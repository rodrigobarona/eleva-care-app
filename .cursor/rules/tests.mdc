---
description: write and update tests
globs: 
---

# Instructions to write and update tests

- Tests should be consistents look how are before implement to keep the same patern
- Always lint the code
- Always run the tests before finish your implementation


# Unit Test Rule for Next.js 14 with Jest

## Semantic Description
This rule instructs the AI to generate unit tests for Next.js 14 projects that use the App Router. The tests should be written using Jest and follow the project’s best practices. The AI must:
- Create tests for utility functions (e.g. functions in `@lib` such as encryption or formatting utilities) and other small, pure functions.
- Organize tests in a dedicated `tests/` folder, mirroring the codebase structure.
- Use clear naming conventions (e.g. files ending with `.test.ts` or `.spec.ts`).
- Include brief inline comments explaining test cases when appropriate.
- Ensure consistency with existing test patterns and linting rules.
- Automatically attach relevant global or project-specific guidelines when generating test code.

## File Pattern Matching
- **Applies to:**  
  Files matching patterns such as `**/tests/**/*.test.ts` or `**/tests/**/*.spec.ts`.
- **Targets:**  
  - Unit tests for utility functions (e.g., files in `@lib`).
  - Tests for small, pure functions and helper modules.
  
## Rule Details & Examples
- **Test Organization & Structure:**  
  - Place all unit tests under the `tests/` directory at the project root.
  - Mirror the folder structure of your source code (e.g. `src/lib/` → `tests/lib/`).
- **Test Framework:**  
  - Use [Jest](mdc:https:/jestjs.io) as the test runner.
  - For React component tests (if applicable), integrate [React Testing Library](mdc:https:/testing-library.com/docs/react-testing-library/intro).
- **Example 1: Utility Function Test**  
  *For a function in `@lib/formatters.ts` that formats dates:*  
  - Create a corresponding test file (e.g. `tests/lib/formatters.test.ts`)  
  - Write tests that cover typical, edge, and error cases using Jest assertions.
- **Example 2: Component Test (if needed)**  
  *For a client-side component in `@components/Button.tsx`:*  
  - Create a test file (e.g. `tests/components/Button.test.tsx`)  
  - Use React Testing Library to simulate rendering and user events.

## Automatic Attachment & References
- When a file that matches any of the above patterns is referenced (e.g. a request to generate tests for a utility function), automatically attach this rule.
- If needed, chain this rule with global testing guidelines by referencing `@file global-test-guidelines.mdc`.

## Additional Guidelines
- Ensure that all tests adhere to the project’s linting and formatting rules.
- Validate that tests run successfully with commands such as `npm test` or `yarn test`.
- For integration tests (e.g. API endpoints or server actions), separate rules should be used. This rule applies only to unit tests.


