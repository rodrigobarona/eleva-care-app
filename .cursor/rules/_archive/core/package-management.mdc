---
description: "PNPM Package Manager - Always use PNPM for package management in this project"
type: "always"
alwaysApply: true
---

# PNPM Package Management Rule

## 🚨 CRITICAL: Always Use PNPM

This project **EXCLUSIVELY** uses **PNPM** as the package manager. Never use npm or yarn.

### ✅ Correct Commands:

```bash
# Installing dependencies
pnpm install

# Adding packages
pnpm add package-name
pnpm add -D package-name  # dev dependencies

# Running scripts
pnpm run build
pnpm run dev
pnpm run test

# Updating packages
pnpm update

# Removing packages
pnpm remove package-name
```

### ❌ Never Use:

```bash
# DON'T use npm
npm install     # ❌ WRONG
npm run build   # ❌ WRONG

# DON'T use yarn
yarn install    # ❌ WRONG
yarn add        # ❌ WRONG
```

## Why PNPM?

1. **Performance**: Faster installations through symlinks and deduplication
2. **Disk Space**: Efficient storage with content-addressable store
3. **Strict**: Better dependency isolation and no phantom dependencies
4. **Monorepo Ready**: Built-in workspace support
5. **Project Standard**: This project is configured for PNPM

## Project Configuration

- `pnpm-lock.yaml` is the lockfile (never `package-lock.json` or `yarn.lock`)
- Scripts in `package.json` are designed for PNPM
- `.npmrc` configuration optimized for PNPM
- CI/CD pipelines use PNPM

## Important Notes

### Package Scripts

Always prefix with `pnpm`:

- ✅ `pnpm run build`
- ✅ `pnpm run dev`
- ✅ `pnpm run test`

### Dependencies

When suggesting package installations:

- ✅ `pnpm add @tiptap/core@3.1.0`
- ✅ `pnpm add -D @types/node`

### Terminal Commands

When running terminal commands:

- ✅ Use `pnpm build` not `npm run build`
- ✅ Use `pnpm install` not `npm install`

## Error Prevention

If you see:

- `package-lock.json` - Remove it and use `pnpm-lock.yaml`
- `yarn.lock` - Remove it and use `pnpm-lock.yaml`
- `node_modules` conflicts - Run `rm -rf node_modules && pnpm install`

## Build & Development

All package operations must use PNPM:

- Development: `pnpm dev`
- Building: `pnpm build`
- Testing: `pnpm test`
- Linting: `pnpm lint`

## CI/CD

This project's CI/CD is configured for PNPM. Using other package managers will break:

- GitHub Actions workflows
- Vercel deployments
- Build processes
- Dependency caching

---

**Remember: This is a PNPM-only project. Always use PNPM commands!** 🚀
