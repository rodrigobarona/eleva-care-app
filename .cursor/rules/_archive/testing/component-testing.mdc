---
description: Component Testing Guidelines for React and Next.js 16
globs:
alwaysApply: false
---

# Component Testing Guidelines for React and Next.js 16

## Overview

Component testing ensures that UI components render correctly, respond to user interactions as expected, and maintain visual and functional integrity. This guide provides best practices for testing React components in the Eleva Care application using React Testing Library.

## Setup and Imports

Standard test file setup:

```tsx
import { ComponentToTest } from '@/components/path/to/Component';
import { describe, expect, it, jest } from '@jest/globals';
import { fireEvent, render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

// Optional: Mock any hooks or context providers
jest.mock('next/navigation', () => ({
  useRouter: jest.fn().mockReturnValue({
    push: jest.fn(),
    back: jest.fn(),
    forward: jest.fn(),
  }),
}));

describe('ComponentToTest', () => {
  // Your tests here
});
```

## Component Testing Strategies

### 1. Rendering Tests

```tsx
it('renders correctly with default props', () => {
  render(<ComponentToTest />);

  // Check that important elements are in the document
  expect(screen.getByRole('button', { name: /submit/i })).toBeInTheDocument();
  expect(screen.getByText('Component Title')).toBeInTheDocument();
});

it('renders with custom props', () => {
  render(<ComponentToTest title="Custom Title" variant="secondary" />);

  // Check that props are applied correctly
  expect(screen.getByText('Custom Title')).toBeInTheDocument();
  expect(screen.getByRole('button')).toHaveClass('btn-secondary');
});
```

### 2. Interaction Tests

```tsx
it('responds to user interactions', async () => {
  const user = userEvent.setup();
  const handleClick = jest.fn();

  render(<ComponentToTest onClick={handleClick} />);

  // Find the element
  const button = screen.getByRole('button');

  // Interact with it
  await user.click(button);

  // Check the result
  expect(handleClick).toHaveBeenCalledTimes(1);
});

it('handles form input and submission', async () => {
  const user = userEvent.setup();
  const handleSubmit = jest.fn();

  render(<MyForm onSubmit={handleSubmit} />);

  // Fill out form fields
  await user.type(screen.getByLabelText(/name/i), 'John Doe');
  await user.type(screen.getByLabelText(/email/i), 'john@example.com');

  // Submit the form
  await user.click(screen.getByRole('button', { name: /submit/i }));

  // Check that the form was submitted with the correct data
  expect(handleSubmit).toHaveBeenCalledWith(
    expect.objectContaining({
      name: 'John Doe',
      email: 'john@example.com',
    }),
  );
});
```

### 3. Conditional Rendering Tests

```tsx
it('conditionally renders elements based on props', () => {
  const { rerender } = render(<ComponentToTest showFeature={false} />);

  // Feature should be hidden
  expect(screen.queryByTestId('feature')).not.toBeInTheDocument();

  // Update props and re-render
  rerender(<ComponentToTest showFeature={true} />);

  // Feature should now be visible
  expect(screen.getByTestId('feature')).toBeInTheDocument();
});
```

## Testing with Context Providers

```tsx
// Create a test wrapper with necessary providers
const renderWithProviders = (ui, { providerProps = {}, ...renderOptions } = {}) => {
  return render(
    <ThemeProvider {...providerProps.theme}>
      <UserProvider {...providerProps.user}>{ui}</UserProvider>
    </ThemeProvider>,
    renderOptions,
  );
};

it('works with context values', () => {
  renderWithProviders(<ComponentThatUsesContext />, {
    providerProps: {
      theme: { mode: 'dark' },
      user: { user: { name: 'Test User' } },
    },
  });

  // Test component with context values
  expect(screen.getByText('Test User')).toBeInTheDocument();
  expect(screen.getByTestId('theme-element')).toHaveClass('dark-mode');
});
```

## Testing Async Components

```tsx
it('displays loading state and then loaded content', async () => {
  // Mock the API call
  jest.spyOn(global, 'fetch').mockImplementation(() =>
    Promise.resolve({
      json: () => Promise.resolve({ data: 'test data' }),
    }),
  );

  render(<AsyncComponent />);

  // Initially should show loading state
  expect(screen.getByText('Loading...')).toBeInTheDocument();

  // After data loads, should show content
  await waitFor(() => {
    expect(screen.queryByText('Loading...')).not.toBeInTheDocument();
    expect(screen.getByText('test data')).toBeInTheDocument();
  });

  // Clean up
  global.fetch.mockRestore();
});
```

## Testing with Server Components

Next.js server components require special consideration:

```tsx
// For server components, mock the data they would receive
const mockData = {
  title: 'Server Component Data',
  items: ['Item 1', 'Item 2'],
};

// Create a client wrapper for the server component
function ServerComponentWrapper({ serverData = mockData }) {
  return (
    <div data-testid="server-wrapper">
      <ServerComponent data={serverData} />
    </div>
  );
}

it('renders server component with mock data', () => {
  render(<ServerComponentWrapper />);

  expect(screen.getByText('Server Component Data')).toBeInTheDocument();
  expect(screen.getByText('Item 1')).toBeInTheDocument();
  expect(screen.getByText('Item 2')).toBeInTheDocument();
});
```

## Testing Best Practices

### 1. Querying Elements

Use the priority order recommended by React Testing Library:

1. **Accessibility-focused queries** (preferred):

   ```tsx
   screen.getByRole('button', { name: 'Submit' });
   screen.getByLabelText('Email address');
   screen.getByPlaceholderText('Enter your email');
   screen.getByText('Welcome');
   ```

2. **Test IDs** (when needed):
   ```tsx
   screen.getByTestId('submit-button');
   ```

### 2. Asserting Styles and Attributes

```tsx
// Check CSS classes
expect(element).toHaveClass('btn-primary');

// Check attributes
expect(element).toHaveAttribute('href', '/home');

// Check styles (with caution)
expect(element).toHaveStyle({
  color: 'rgb(255, 0, 0)',
  display: 'flex',
});

// Check disabled state
expect(button).toBeDisabled();
expect(button).not.toBeDisabled();
```

### 3. Testing Form Validation

```tsx
it('validates form input', async () => {
  const user = userEvent.setup();
  render(<MyForm />);

  // Submit without filling required fields
  await user.click(screen.getByRole('button', { name: /submit/i }));

  // Check for validation messages
  expect(screen.getByText('Email is required')).toBeInTheDocument();

  // Fill with invalid data
  await user.type(screen.getByLabelText(/email/i), 'invalid-email');
  await user.click(screen.getByRole('button', { name: /submit/i }));

  // Check for validation error
  expect(screen.getByText('Invalid email format')).toBeInTheDocument();

  // Fix the input
  await user.clear(screen.getByLabelText(/email/i));
  await user.type(screen.getByLabelText(/email/i), 'valid@example.com');
  await user.click(screen.getByRole('button', { name: /submit/i }));

  // Validation error should be gone
  expect(screen.queryByText('Invalid email format')).not.toBeInTheDocument();
});
```

### 4. Mocking External Dependencies

```tsx
// Mock external modules
jest.mock('@/lib/utils', () => ({
  formatDate: jest.fn().mockReturnValue('01/01/2023'),
  calculateTotal: jest.fn().mockReturnValue(100),
}));

it('uses utility functions', () => {
  const utils = require('@/lib/utils');
  render(
    <ComponentThatUsesUtils
      date={new Date()}
      items={
        [
          /* items */
        ]
      }
    />,
  );

  expect(utils.formatDate).toHaveBeenCalled();
  expect(utils.calculateTotal).toHaveBeenCalled();
  expect(screen.getByText('Date: 01/01/2023')).toBeInTheDocument();
  expect(screen.getByText('Total: $100')).toBeInTheDocument();
});
```

## Common Pitfalls

1. **Using `getBy` for elements that might not exist**:

   ```tsx
   // WRONG: Will throw if element doesn't exist
   expect(screen.getByText('Optional Element')).toBeInTheDocument();

   // CORRECT: Use queryBy for elements that might not exist
   expect(screen.queryByText('Optional Element')).not.toBeInTheDocument();
   ```

2. **Not waiting for async actions**:

   ```tsx
   // WRONG: No waiting
   userEvent.click(button);
   expect(screen.getByText('Loaded')).toBeInTheDocument(); // May fail

   // CORRECT: Use waitFor or findBy queries
   await userEvent.click(button);
   await waitFor(() => {
     expect(screen.getByText('Loaded')).toBeInTheDocument();
   });
   ```

3. **Testing implementation details**:

   ```tsx
   // WRONG: Testing implementation details
   expect(component.state.count).toBe(1);

   // CORRECT: Test what the user sees
   expect(screen.getByText('Count: 1')).toBeInTheDocument();
   ```

## Best Practices Summary

1. **Test from a user's perspective**: Focus on what users see and interact with
2. **Use accessibility queries**: Prefer role, label, and text queries
3. **Test component behavior**: Ensure components react correctly to interactions
4. **Test error states**: Verify error messages and validation behavior
5. **Test loading states**: Check that loading indicators are displayed properly
6. **Keep tests isolated**: Reset between tests and avoid dependencies between tests
7. **Mock external dependencies**: Don't rely on external services or APIs for component tests
