---
description: Database Testing and Mocking Guidelines
globs: ["tests/**/*.test.ts", "tests/**/db*.test.ts", "tests/**/database*.test.ts"]
---

# Database Testing and Mocking Guidelines

## Overview

Database mocking is one of the most challenging aspects of testing in the Eleva Care application due to the chained method pattern used by Drizzle ORM. This guide provides detailed patterns and examples for properly mocking database operations in tests.

## Key Challenges

1. **Method Chaining**: Drizzle uses method chaining (e.g., `db.select().from().where().execute()`)
2. **Type Safety**: Ensuring mocks return data that matches schema types
3. **Query Specificity**: Different queries need different mock implementations
4. **Transaction Support**: Handling transactions in test scenarios

## Standard Mocking Pattern

### Basic Database Mock Setup

Always set up your database mocks **before** importing the modules that use them:

```typescript
// CORRECT: Mock first, then import
jest.mock('@/drizzle/db', () => ({
  db: {
    // Mock implementation here
  }
}));

// THEN import the modules that use the database
import { someFunction } from '@/server/actions/some-module';
```

### Complete Query Chain Mocking

Always mock the complete chain including the final method (usually `execute()`, `get()`, or `returning()`):

```typescript
jest.mock('@/drizzle/db', () => ({
  db: {
    // SELECT query with execute()
    select: jest.fn().mockReturnValue({
      from: jest.fn().mockReturnValue({
        where: jest.fn().mockReturnValue({
          execute: jest.fn().mockResolvedValue([
            {
              id: 'record_123',
              name: 'Test Record',
              // Include all fields that match your schema
            }
          ])
        })
      })
    }),
    
    // INSERT with returning()
    insert: jest.fn().mockReturnValue({
      values: jest.fn().mockReturnValue({
        returning: jest.fn().mockResolvedValue([
          { id: 'record_123', someField: 'value' }
        ])
      })
    }),
    
    // UPDATE with set(), where(), and returning()
    update: jest.fn().mockReturnValue({
      set: jest.fn().mockReturnValue({
        where: jest.fn().mockReturnValue({
          returning: jest.fn().mockResolvedValue([
            { id: 'record_123', someField: 'updated value' }
          ])
        })
      })
    }),
    
    // DELETE with where() and returning()
    delete: jest.fn().mockReturnValue({
      where: jest.fn().mockReturnValue({
        returning: jest.fn().mockResolvedValue([
          { id: 'record_123' }
        ])
      })
    }),
    
    // Query helper functions
    query: {
      TableName: {
        findFirst: jest.fn().mockResolvedValue({
          id: 'record_123',
          // Include fields that match your schema
        }),
        findMany: jest.fn().mockResolvedValue([
          { id: 'record_123' },
          { id: 'record_456' }
        ])
      }
    }
  }
}));
```

## Conditional Response Mocking

For tests that need different responses based on input:

```typescript
// Create a mock with conditional behavior
const mockExecute = jest.fn().mockImplementation((id) => {
  if (id === 'exists_123') {
    return Promise.resolve([{ 
      id: 'exists_123', 
      name: 'Existing Record' 
    }]);
  }
  return Promise.resolve([]);
});

jest.mock('@/drizzle/db', () => ({
  db: {
    select: jest.fn().mockReturnValue({
      from: jest.fn().mockReturnValue({
        where: jest.fn().mockReturnValue({
          execute: mockExecute
        })
      })
    })
  }
}));
```

## Testing Error Handling

To test database error scenarios:

```typescript
// Mock database error for a specific test
it('should handle database errors gracefully', async () => {
  // Override the default mock for this test
  const dbMock = require('@/drizzle/db').db;
  dbMock.select.mockReturnValue({
    from: jest.fn().mockReturnValue({
      where: jest.fn().mockReturnValue({
        execute: jest.fn().mockRejectedValue(new Error('Database connection error'))
      })
    })
  });
  
  // Test the error handling
  const result = await functionThatUsesDatabase();
  expect(result.error).toBe(true);
  expect(result.message).toContain('database error');
});
```

## Mocking with Schema Types

For better type safety in mocks:

```typescript
import { EventTable } from '@/drizzle/schema';
import type { InferSelectModel } from 'drizzle-orm';

// Create typed mock data
type Event = InferSelectModel<typeof EventTable>;

const mockEvent: Event = {
  id: 'event_123',
  clerkUserId: 'user_123',
  name: 'Test Event',
  slug: 'test-event',
  description: 'A test event description',
  isActive: true,
  durationInMinutes: 60,
  price: 2500,
  currency: 'eur',
  stripeProductId: 'prod_123',
  stripePriceId: 'price_123',
  createdAt: new Date(),
  updatedAt: new Date(),
};

// Use the typed mock in your database mock
jest.mock('@/drizzle/db', () => ({
  db: {
    select: jest.fn().mockReturnValue({
      from: jest.fn().mockReturnValue({
        where: jest.fn().mockReturnValue({
          execute: jest.fn().mockResolvedValue([mockEvent])
        })
      })
    })
  }
}));
```

## Handling beforeEach Resets

To reset mocks between tests:

```typescript
describe('Module with database operations', () => {
  // Setup shared mocks
  const mockDbSelect = jest.fn();
  const mockDbFrom = jest.fn();
  const mockDbWhere = jest.fn();
  const mockDbExecute = jest.fn();
  
  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks();
    
    // Re-setup the chain
    mockDbWhere.mockReturnValue({
      execute: mockDbExecute.mockResolvedValue([mockEvent])
    });
    mockDbFrom.mockReturnValue({
      where: mockDbWhere
    });
    mockDbSelect.mockReturnValue({
      from: mockDbFrom
    });
    
    // Apply to the main mock
    const dbMock = require('@/drizzle/db').db;
    dbMock.select = mockDbSelect;
  });
  
  it('test case 1', async () => {
    // Default mock behavior from beforeEach
  });
  
  it('test case 2', async () => {
    // Override for this specific test
    mockDbExecute.mockResolvedValue([]);
  });
});
```

## Testing Transactions

When testing functions that use transactions:

```typescript
jest.mock('@/drizzle/db', () => {
  // Create transaction mock
  const transactionMock = {
    insert: jest.fn().mockReturnValue({
      values: jest.fn().mockReturnValue({
        returning: jest.fn().mockResolvedValue([{ id: 'tx_record_123' }])
      })
    }),
    update: jest.fn().mockReturnValue({
      set: jest.fn().mockReturnValue({
        where: jest.fn().mockReturnValue({
          returning: jest.fn().mockResolvedValue([{ id: 'tx_record_123' }])
        })
      })
    })
  };

  return {
    db: {
      // Regular methods
      select: jest.fn().mockReturnValue({
        from: jest.fn().mockReturnValue({
          where: jest.fn().mockReturnValue({
            execute: jest.fn().mockResolvedValue([/* data */])
          })
        })
      }),
      
      // Transaction support
      transaction: jest.fn().mockImplementation(async (callback) => {
        // Call the callback with our transaction mock
        return await callback(transactionMock);
      })
    }
  };
});
```

## Common Pitfalls

1. **Forgetting execute()**:
   ```typescript
   // WRONG - missing execute()
   db.select.mockReturnValue({
     from: jest.fn().mockReturnValue({
       where: jest.fn().mockReturnValue([])
     })
   });
   
   // CORRECT
   db.select.mockReturnValue({
     from: jest.fn().mockReturnValue({
       where: jest.fn().mockReturnValue({
         execute: jest.fn().mockResolvedValue([])
       })
     })
   });
   ```

2. **Not resolving promises**:
   ```typescript
   // WRONG - not returning a promise
   execute: jest.fn().mockReturnValue([])
   
   // CORRECT
   execute: jest.fn().mockResolvedValue([])
   ```

3. **Incorrect data structure**:
   ```typescript
   // WRONG - doesn't match schema
   execute: jest.fn().mockResolvedValue('result')
   
   // CORRECT
   execute: jest.fn().mockResolvedValue([{ id: 'record_123', /* other fields */ }])
   ```

## Best Practices Summary

1. **Mock Before Import**: Always set up database mocks before importing modules that use them
2. **Complete Chains**: Mock the entire method chain including final methods
3. **Match Schema Types**: Return data that matches your schema structure
4. **Reset Between Tests**: Clear mocks in beforeEach to prevent test interdependence
5. **Test Error Cases**: Explicitly test database error handling
6. **Be Specific**: Create specific mocks for specific query patterns
7. **Document Complexity**: Add comments for complex mock setups 