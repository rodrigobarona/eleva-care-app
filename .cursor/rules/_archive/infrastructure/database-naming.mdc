---
description:
globs:
alwaysApply: false
---
# Database Naming Conventions Rule

## Overview
This rule enforces consistent naming conventions for database tables, columns, and relationships in the Eleva Care App.

## Key Rules

### Table Names
- Use `snake_case` for all new tables
- Always use plural form (e.g., `users`, `profiles`, `events`)
- Prefix related tables appropriately (e.g., `stripe_payments`, `google_calendar_events`)

### Column Names
- Use `snake_case` for all new columns
- Primary key should be named `id`
- Foreign keys should follow `resource_id` pattern
- Timestamps should be `created_at` and `updated_at`
- Boolean columns should start with `is_`, `has_`, or `can_`

### Indexes and Constraints
- Primary key constraints: `pk_table_name`
- Foreign key constraints: `fk_table_name_reference_table`
- Unique constraints: `uq_table_name_column_name`
- Indexes: `idx_table_name_column_name`

## Examples

```sql
-- ✅ Good Examples
CREATE TABLE expert_profiles (
    id UUID PRIMARY KEY,
    user_id UUID REFERENCES users(id),
    first_name VARCHAR(255),
    is_verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_expert_profiles_user_id ON expert_profiles(user_id);

-- ❌ Bad Examples
CREATE TABLE expertProfile (  -- Wrong: camelCase and singular
    profileId UUID PRIMARY KEY,  -- Wrong: should be just 'id'
    userId UUID,  -- Wrong: should be user_id
    firstName VARCHAR(255),  -- Wrong: should be first_name
    createdAt TIMESTAMP  -- Wrong: should be created_at
);
```

## Migration Guidelines

When working with legacy tables:
1. Do not rename existing tables/columns without a proper migration plan
2. Follow the new convention for any new additions
3. Document any technical debt in the schema.ts file
4. Create migration tickets for future standardization

## Drizzle Schema Guidelines

```typescript
// ✅ Good Example
export const PaymentTransferTable = pgTable('payment_transfers', {
  id: serial('id').primaryKey(),
  user_id: uuid('user_id').notNull(),
  amount: integer('amount').notNull(),
  created_at: timestamp('created_at').defaultNow(),
  updated_at: timestamp('updated_at').defaultNow()
});

// ❌ Bad Example
export const UserProfileTable = pgTable('userProfiles', {
  id: serial('id').primaryKey(),
  userId: uuid('userId').notNull(),
  createdAt: timestamp('createdAt').defaultNow()
});
```

## Enforcement

This rule is enforced through:
1. Code review process
2. Schema validation in CI/CD pipeline
3. Documentation requirements for any schema changes
4. Migration planning for legacy code updates

## Exceptions

Exceptions to these rules must be:
1. Documented in the schema.ts file
2. Approved by the team lead
3. Added to the technical debt backlog
4. Planned for future migration
