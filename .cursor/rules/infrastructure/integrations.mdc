---
description: 
globs: 
alwaysApply: false
---
# Integration Services Configuration and Usage

## Service Overview

```
integrations/
├── Stripe         # Payment processing
├── Clerk          # Authentication
├── Novu           # Notifications
├── QStash         # Background jobs
├── PostHog        # Analytics
├── Redis          # Caching & queues
└── Google Calendar # Calendar integration
```

## Configuration Standards

### 1. Environment Variables
```typescript
// config/env.ts
import { z } from "zod";

export const envSchema = z.object({
  // Stripe Configuration
  STRIPE_SECRET_KEY: z.string(),
  STRIPE_WEBHOOK_SECRET: z.string(),
  
  // Clerk Configuration
  CLERK_SECRET_KEY: z.string(),
  
  // Novu Configuration
  NOVU_API_KEY: z.string(),
  
  // QStash Configuration
  QSTASH_TOKEN: z.string(),
  
  // Redis Configuration
  REDIS_URL: z.string(),
  
  // PostHog Configuration
  POSTHOG_API_KEY: z.string(),
});
```

## Service Implementations

### 1. Stripe Integration
```typescript
// lib/stripe.ts
import Stripe from 'stripe';

export const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2023-10-16',
  typescript: true,
});

export async function createPaymentIntent(amount: number) {
  return stripe.paymentIntents.create({
    amount,
    currency: 'usd',
  });
}
```

### 2. Novu Notifications
```typescript
// lib/notifications.ts
import { Novu } from '@novu/node';

export const novu = new Novu(process.env.NOVU_API_KEY);

export async function sendAppointmentNotification(data: AppointmentData) {
  await novu.trigger('appointment-scheduled', {
    to: { subscriberId: data.userId },
    payload: data,
  });
}
```

### 3. QStash Background Jobs
```typescript
// lib/qstash.ts
import { Client } from '@upstash/qstash';

export const qstash = new Client({
  token: process.env.QSTASH_TOKEN,
});

export async function scheduleAppointmentReminder(appointmentId: string) {
  await qstash.publishJSON({
    url: '/api/reminders/appointment',
    body: { appointmentId },
    delay: 24 * 60 * 60, // 24 hours
  });
}
```

### 4. Redis Caching
```typescript
// lib/redis.ts
import { Redis } from '@upstash/redis';

export const redis = new Redis({
  url: process.env.REDIS_URL,
});

export async function cacheData(key: string, data: any) {
  await redis.set(key, JSON.stringify(data), {
    ex: 3600, // 1 hour
  });
}
```

## Best Practices

### 1. Error Handling
```typescript
export async function handleServiceError(
  error: unknown,
  service: 'stripe' | 'novu' | 'qstash' | 'redis'
) {
  if (error instanceof Error) {
    console.error(`${service} error:`, error);
    // Log to monitoring service
  }
  throw error;
}
```

### 2. Rate Limiting
```typescript
export async function withRateLimit(
  key: string,
  fn: () => Promise<any>
) {
  const attempts = await redis.incr(`ratelimit:${key}`);
  if (attempts > 100) throw new Error('Rate limit exceeded');
  
  try {
    return await fn();
  } finally {
    await redis.expire(`ratelimit:${key}`, 3600);
  }
}
```

### 3. Retry Logic
```typescript
export async function withRetry<T>(
  fn: () => Promise<T>,
  retries = 3
): Promise<T> {
  try {
    return await fn();
  } catch (error) {
    if (retries > 0) {
      await new Promise(r => setTimeout(r, 1000));
      return withRetry(fn, retries - 1);
    }
    throw error;
  }
}
```

## Service-Specific Guidelines

### 1. Stripe
- Use webhooks for async events
- Implement proper error handling
- Use test mode for development
- Follow security best practices

### 2. Novu
- Define templates in dashboard
- Use proper subscriber management
- Implement proper error handling
- Monitor delivery rates

### 3. QStash
- Use proper delay calculations
- Implement idempotency
- Handle job failures
- Monitor job execution

### 4. Redis
- Implement proper key naming
- Use appropriate TTLs
- Handle connection issues
- Monitor memory usage

## Testing Guidelines

### 1. Mock Implementations
```typescript
// tests/mocks/stripe.ts
export const mockStripe = {
  paymentIntents: {
    create: jest.fn(),
    retrieve: jest.fn(),
  },
};
```

### 2. Integration Tests
```typescript
describe('Stripe Integration', () => {
  it('creates payment intent', async () => {
    const amount = 1000;
    const intent = await createPaymentIntent(amount);
    expect(intent.amount).toBe(amount);
  });
});
```

## Monitoring and Logging

### 1. Service Health Checks
```typescript
export async function checkServiceHealth() {
  const checks = await Promise.allSettled([
    stripe.paymentIntents.list({ limit: 1 }),
    redis.ping(),
    novu.topics.list(),
  ]);
  
  return checks.map((check, index) => ({
    service: ['stripe', 'redis', 'novu'][index],
    status: check.status,
  }));
}
```

### 2. Error Tracking
```typescript
export function trackServiceError(
  service: string,
  error: Error,
  context?: Record<string, unknown>
) {
  // Log to monitoring service
  console.error(`[${service}] Error:`, {
    message: error.message,
    stack: error.stack,
    context,
  });
}
```

## Security Guidelines

1. **API Keys**
   - Store in environment variables
   - Rotate regularly
   - Use proper access levels
   - Monitor usage

2. **Data Handling**
   - Encrypt sensitive data
   - Implement proper TTLs
   - Follow data privacy laws
   - Handle PII properly

3. **Access Control**
   - Implement proper authentication
   - Use role-based access
   - Monitor access patterns
   - Log security events
