---
description: Stripe Integration Rule: Payments, Connect, and Identity
globs: 
alwaysApply: false
---
# Stripe Integration Rule: Payments, Connect, and Identity

## Semantic Description
This rule directs the AI to generate code and configuration for Stripe integrations that cover:
- **Stripe Payments:** Creating and managing Payment Intents, handling webhooks, and ensuring secure payment flows.
- **Stripe Connect:** Onboarding and managing connected accounts, handling transfers and payouts, and processing OAuth flows when needed.
- **Stripe Identity:** Initiating and managing identity verification sessions with proper error handling and data security.

When generating code, the AI should:
- Follow the latest Stripe API best practices and security guidelines (e.g., PCI compliance).
- Include robust error handling, input validation, and logging.
- Use modular, clean code with clear inline comments explaining each step.
- Reference official Stripe documentation (e.g., [Stripe Docs](mdc:https:/stripe.com/docs)) for up‑to‑date details.
- Respect any project-specific configurations (e.g., environment variables for API keys).

## File Pattern Matching
- **Applies to files in paths matching:**  
  - `**/stripe/**`
  - `**/payments/**` (when related to Stripe Payments)
  - `**/connect/**` (when related to Stripe Connect)
  - `**/identity/**` (when related to Stripe Identity)
  
These patterns ensure that whenever a file touches on Stripe functionality, this rule is automatically included.

## Rule Details & Examples

### Stripe Identity & Connect Integration

- **Sequential Verification Process:**
  - Always implement Identity verification before Connect account creation
  - Store verification status in database with proper timestamps
  - Use webhooks to update verification status in real-time
  - Typical user flow timeline (per [Stripe docs](mdc:https://stripe.com/docs/identity/verification-sessions)): 
    1. User initiates verification (1-2 minutes)
    2. User completes document and selfie verification (3-5 minutes)
    3. Verification processing by Stripe (typically seconds to minutes)
    4. Upon success, proceed to Connect account creation (1-2 minutes)
    5. User completes Connect onboarding (5-10 minutes)
  - Allow at least 24 hours for full end-to-end process completion in some cases

- **Key Components:**
  - Core functions in `lib/stripe/identity.ts`
  - API endpoints in `app/api/stripe/identity/` and `app/api/stripe/connect/`
  - Webhook handlers in `app/api/webhooks/stripe/`
  - User-facing pages in `app/(private)/account/identity/`

- **API Architecture:**
  - `POST /api/stripe/identity/verification`: Creates new verification session
  - `GET /api/stripe/identity/status`: Gets verification status
  - `POST /api/stripe/connect/create`: Creates Connect account for verified users
  - Webhooks for handling `identity.verification_session.verified`, `identity.verification_session.requires_input`, and `account.updated` events

- **Type Safety Guidelines:**
  - Use `import type Stripe from 'stripe'` for type imports
  - Create specific type definitions for Stripe properties that may not be in the SDK
  - Avoid using `any` or `Record<string, any>` in type assertions
  - Ensure proper error handling with specific error types

- **Example Implementation:**
  ```typescript
  // 1. Create Identity verification session
  const verificationSession = await stripe.identity.verificationSessions.create({
    type: 'document',
    metadata: {
      userId,
      clerkUserId,
      email,
      created_at: new Date().toISOString(),
    },
    return_url: `${baseUrl}/account/identity/callback`,
  });

  // 2. Check verification status
  const verificationStatus = await getIdentityVerificationStatus(verificationId);

  // 3. Create Connect account only after verification
  if (verificationStatus.status === 'verified') {
    const account = await stripe.accounts.create({
      type: 'express',
      country: country.toUpperCase(),
      email,
      capabilities: {
        card_payments: { requested: true },
        transfers: { requested: true },
      },
      metadata: {
        clerkUserId,
        identity_verified: 'true',
        identity_verified_at: new Date().toISOString(),
        identity_verification_id: verificationId,
      },
    });
  }
  ```

### Stripe Payments
- **Guidelines:**  
  - Generate code that creates Payment Intents (or Setup Intents as needed) with the correct currency, amount, and metadata.
  - Include webhook handling for payment events (e.g., successful payment, failed payment) with proper verification.
  - Emphasize secure handling of API keys and sensitive data via environment variables.
- **Example:**  
  - A function that initializes a Payment Intent, checks for errors, and returns a client secret.

## Database Schema Requirements
When implementing Stripe, ensure the database schema includes these fields:

```sql
-- Identity Verification Fields
stripeIdentityVerificationId TEXT,
stripeIdentityVerificationStatus TEXT,
stripeIdentityVerificationLastChecked TIMESTAMP,
stripeIdentityVerified BOOLEAN DEFAULT false,

-- Connect Account Fields
stripeConnectAccountId TEXT,
stripeConnectDetailsSubmitted BOOLEAN DEFAULT false,
stripeConnectPayoutsEnabled BOOLEAN DEFAULT false,
stripeConnectChargesEnabled BOOLEAN DEFAULT false,
```

## Security Best Practices

- **Webhook Signature Verification:**
  ```typescript
  const event = stripe.webhooks.constructEvent(
    body,
    signature,
    process.env.STRIPE_WEBHOOK_SECRET as string
  );
  ```

- **Metadata Usage:**
  - Always include metadata in Stripe resources for audit trails
  - Use standardized keys like `clerkUserId`, `created_at`
  - Store verification timestamps

- **Error Handling:**
  - Use specific error types and messages
  - Log errors with contextual information
  - Return user-friendly error messages
  
## User Experience Requirements

- Provide clear guidance before verification begins
- Show real-time status updates during verification process
- Handle errors gracefully with helpful messages
- Ensure seamless transition from identity verification to Connect setup
- Implement fallback options for service disruptions:
  - Provide a "Try Again Later" option if Stripe verification is unavailable
  - Include contact support option for verification issues
  - Implement a status page that checks Stripe's service status
  - Display estimated wait times during longer verification processes
  - Use rate limiting with clear cooldown messages for repeated attempts

## Testing & Debugging

- Use Stripe test mode for development
- Utilize Stripe's test identity verification images
- Verify webhook endpoints with Stripe CLI
- Log all verification status updates for debugging
- Handle stuck test verifications:
  - Implement timeout handling for verifications that don't progress
  - Create manual admin override capabilities for test environments
  - Use Stripe CLI's `trigger` command to simulate webhook events
  - For tests that get stuck in "processing" state, implement a reset option
  - Document common test verification failures (e.g., blurry test images, missing documents)

## Automatic Attachment & References
- **Automatic Inclusion:**  
  - When any file references "stripe", "identity", or matches the file patterns above, this rule should automatically be attached.
- **References:**  
  - If needed, chain with a global Stripe guideline file using `@file stripe-docs.mdc` to include extra context from official documentation.

## Additional Guidelines
- **Security:**  
  - Ensure sensitive keys or tokens are never hardcoded; use environment variables.
- **Modularity:**  
  - Write functions that are production‑ready and easy to integrate into a Next.js (or Node.js) backend.
- **Documentation:**  
  - Include inline comments that describe the integration logic.
- **Consistency:**  
  - Follow the project's coding style, linting rules, and naming conventions.

