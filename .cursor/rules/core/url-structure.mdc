---
description: 'URL Structure: /legal/ vs /trust/ Architecture'
type: 'auto'
globs:
  ['app/**/legal/**', 'app/**/trust/**', 'content/legal/**', 'content/trust/**', 'middleware.ts']
alwaysApply: false
---

# URL Structure: `/legal/` vs `/trust/` Architecture

## Overview

Eleva Care uses a **hybrid URL structure** that separates trust/security content from legal documents.

## URL Structure

### `/trust/` - Trust Center (Security & Compliance)

**Purpose**: Security practices, compliance certifications, data protection measures

**Routes**:

- `/trust/security` - Security practices, certifications, compliance (EN, ES, PT, BR)
- `/trust/dpa` - Data Processing Agreement (GDPR/LGPD) (EN, ES, PT, BR)

**Location**: `content/trust/{document}/{locale}.mdx`
**Routing**: `app/[locale]/(public)/trust/[document]/page.tsx`

**Target Audience**: Potential clients, security teams, compliance officers, enterprise buyers

---

### `/legal/` - Legal Documents (Contracts & Policies)

**Purpose**: Legal agreements, terms, policies, contractual obligations

**Routes**:

- `/legal/terms` - Terms of Service
- `/legal/privacy` - Privacy Policy
- `/legal/cookie` - Cookie Policy
- `/legal/payment-policies` - Payment Policies
- `/legal/expert-agreement` - Expert Agreement

**Location**: `content/{document}/{locale}.mdx`
**Routing**: `app/[locale]/(public)/legal/[document]/page.tsx`

**Target Audience**: Users, legal departments, compliance reviews, support

---

## Implementation Patterns

### 1. SEO Redirects (Middleware)

**Always use 301 (permanent) redirects** for old URLs:

```typescript
// middleware.ts
if (path.includes('/legal/security') || path.includes('/legal/dpa')) {
  const newPath = path
    .replace('/legal/security', '/trust/security')
    .replace('/legal/dpa', '/trust/dpa');
  return NextResponse.redirect(new URL(newPath, req.url), 301);
}
```

**Why Middleware?**

- ✅ Runs on Edge (fast)
- ✅ Handles all locale prefixes automatically
- ✅ Returns 301 for SEO
- ✅ More maintainable than config rules

---

### 2. Internal Linking

**✅ Correct**:

```markdown
<!-- In MDX files -->

See our [Security practices](/trust/security) for details.
Review our [Data Processing Agreement](/trust/dpa).
Read our [Terms of Service](/legal/terms).
```

**❌ Incorrect**:

```markdown
<!-- Don't hardcode locales -->

See our [Security](/en/trust/security) <!-- ❌ -->
See our [Security](/trust/security) <!-- ✅ -->
```

---

### 3. Sitemap Configuration

```typescript
// app/sitemap.ts
const legalDocuments = ['terms', 'privacy', 'cookie', 'payment-policies', 'expert-agreement'];
const trustDocuments = ['security', 'dpa'];

// Trust documents get higher priority (0.7 vs 0.6)
trustDocuments.forEach((document) => {
  sitemapEntries.push({
    url: `${baseUrl}/trust/${document}`,
    priority: 0.7, // Higher than legal
    // ...
  });
});
```

---

### 4. Routing Configuration

```typescript
// lib/i18n/routing.ts
export const routing = defineRouting({
  pathnames: {
    // Trust routes
    '/trust': '/trust',
    '/trust/security': '/trust/security',
    '/trust/dpa': '/trust/dpa',
    // Legal routes
    '/legal': '/legal',
    '/legal/terms': '/legal/terms',
    // ...
  },
});
```

---

### 5. Valid Documents Arrays

```typescript
// app/[locale]/(public)/trust/[document]/page.tsx
const validDocuments = ['security', 'dpa'];

// app/[locale]/(public)/legal/[document]/page.tsx
const validDocuments = ['terms', 'privacy', 'cookie', 'payment-policies', 'expert-agreement'];
```

---

## Adding New Content

### Adding to Trust Center

1. Create MDX files: `content/trust/{document}/{en,es,pt,br}.mdx`
2. Add to routing: `lib/i18n/routing.ts`
3. Update valid documents: `app/[locale]/(public)/trust/[document]/page.tsx`
4. Add translations: `messages/{lang}.json` under `metadata.trust.documents`
5. Update sitemap: `app/sitemap.ts` → `trustDocuments` array

### Adding to Legal Section

1. Create MDX files: `content/{document}/{en,es,pt,br}.mdx`
2. Add to routing: `lib/i18n/routing.ts`
3. Update valid documents: `app/[locale]/(public)/legal/[document]/page.tsx`
4. Add translations: `messages/{lang}.json` under `metadata.legal.documents`
5. Update sitemap: `app/sitemap.ts` → `legalDocuments` array

---

## Cross-References

**Trust → Legal**:

```markdown
For user rights, see our [Privacy Policy](/legal/privacy).
```

**Legal → Trust**:

```markdown
Learn more about our [security measures](/trust/security).
```

---

## Common Mistakes

### ❌ Hardcoding Locales

```typescript
// Wrong
<Link href="/en/trust/security">Security</Link>

// Correct
<Link href="/trust/security">Security</Link>
```

### ❌ Using Wrong Section

```typescript
// Wrong - DPA is in trust, not legal
documentPath: '/legal/dpa';

// Correct
documentPath: '/trust/dpa';
```

### ❌ Forgetting Redirects

```typescript
// Always add middleware redirects for moved content
if (path.includes('/old-path')) {
  return NextResponse.redirect(new URL('/new-path', req.url), 301);
}
```

---

## Testing Checklist

- [ ] URL loads in all languages (EN, ES, PT, BR)
- [ ] Old URLs redirect with 301 status
- [ ] Redirects work with locale prefixes
- [ ] Sitemap includes correct URLs
- [ ] Navigation shows correct links
- [ ] Cross-references work

---

## Documentation

See [URL Structure Guide](../../../docs/04-development/url-structure-guide.md) for complete documentation.

---

## Key Rules

1. **Trust = Security/Compliance** → `/trust/`
2. **Legal = Contracts/Policies** → `/legal/`
3. **Always use 301 redirects** for moved content
4. **Never hardcode locale prefixes** in links
5. **Update all 5 locations** when adding content (content, routing, validDocuments, translations, sitemap)
6. **Higher priority for trust** in sitemap (0.7 vs 0.6)
