---
description:
globs:
alwaysApply: false
---
# Error Handling Patterns

## 1. Error Types

### API Errors
```typescript
export class APIError extends Error {
  constructor(
    message: string,
    public statusCode: number,
    public code: string
  ) {
    super(message);
    this.name = 'APIError';
  }
}
```

### Validation Errors
```typescript
export class ValidationError extends Error {
  constructor(
    message: string,
    public errors: Record<string, string[]>
  ) {
    super(message);
    this.name = 'ValidationError';
  }
}
```

## 2. Error Boundaries

### Component Error Boundaries
```typescript
export function ErrorBoundary({
  error,
  reset,
}: {
  error: Error;
  reset: () => void;
}) {
  return (
    <div>
      <h2>Something went wrong!</h2>
      <button onClick={reset}>Try again</button>
    </div>
  );
}
```

## 3. API Error Handling

### Server Actions
```typescript
export async function handleAction() {
  try {
    // Action logic
  } catch (error) {
    if (error instanceof ValidationError) {
      return { error: error.errors };
    }
    if (error instanceof APIError) {
      return { error: error.message };
    }
    return { error: 'An unexpected error occurred' };
  }
}
```

## 4. Client-Side Error Handling

### Form Errors
```typescript
export function handleFormError(error: unknown) {
  if (error instanceof ValidationError) {
    return error.errors;
  }
  return { _form: ['An unexpected error occurred'] };
}
```

## 5. Error Logging

### Structured Error Logging
```typescript
export function logError(error: Error, context?: Record<string, unknown>) {
  console.error({
    message: error.message,
    stack: error.stack,
    context,
    timestamp: new Date().toISOString(),
  });
}
```

## Best Practices

1. Always use typed errors
2. Implement proper error boundaries
3. Log errors with context
4. Handle errors at the appropriate level
5. Provide user-friendly error messages
6. Include error recovery mechanisms
7. Monitor and track errors
8. Document error handling patterns
