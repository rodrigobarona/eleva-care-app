---
description: Generic project rules
globs: 
---
# Updated General Rules for Cursor

## Project Overview
- **Application:** Eleva Care is an appointment scheduling web app for Woman health expert and professionals.
- **Technology Stack:**
  - **Frontend & SSR:** Next.js 15 with App Router
  - **Language:** TypeScript
  - **Styling & UI:** TailwindCSS, Shadcn/ui, Radix UI, Tremor (for data visualization)
  - **Database & ORM:** Neon.tech (Postgrade DB) with Drizzler
  - **Authentication:** Clerk.com
  - **Payments:** Stripe (including Stripe Connect, Customer Portal, and webhooks)
  - **Validation:** Zod for schema validation and type inference
- **Package Manager:** Always use pnpm.

## Code Style and Structure
- **Architecture:**
  - Organize files by feature and function.
  - Use a clear hierarchy: exported component, subcomponents, helpers, static content, and types.
  - Follow Atomic Design principles for UI components:
    - **Atoms:** Basic elements (buttons, inputs, labels)
    - **Molecules:** Combinations of atoms (form groups, cards)
    - **Organisms:** Complex, standalone sections (navigation bars, modals)
    - **Templates & Pages:** Layouts and complete screens
- **Functional & Declarative:**  
  - Use functional components and pure functions; avoid class components.
  - Leverage modularization and iteration to avoid code duplication.
- **Variable Naming:**  
  - Use descriptive names with auxiliary verbs for booleans (e.g., `isLoading`, `hasError`).

## Naming Conventions
- **Directories:**  
  - Use lowercase with dashes (e.g., `components/auth-wizard`).
- **Exports:**  
  - Favor named exports for components and helper functions.

## TypeScript and Zod Usage
- **TypeScript:**  
  - Use TypeScript for all code.
  - Prefer interfaces over types for object shapes.
- **Zod:**  
  - Use Zod for runtime schema validation and type inference.
- **Enums:**  
  - Avoid enums; use literal types or maps instead.

## Code Implementation Guidelines
- **Completeness:**  
  - Fully implement requested functionality with no placeholders or TODOs.
  - Include all required imports and environment variable references (use `.env.local` for sensitive values).
- **DRY Principle:**  
  - Create independent, reusable helper functions.
- **API & Server Actions:**  
  - Write API endpoints in `/app/api/**` following Next.js 15 App Router conventions.
  - Use Server Actions (with `"use server"`) for mutations.
  - Secure API routes with proper validation, error handling, and authentication.
- **Stripe Integration:**  
  - Implement Stripe for payments, subscriptions, and Stripe Connect.
  - Handle webhooks, error conditions, and use the Customer Portal.
  - Sync subscription data with user data securely.
- **Database Integration:**  
  - Use Drizzler as the ORM with Neon.tech as the database.
  - Always reference environment variables for DB credentials.
- **Commit Messages:**  
  - Follow GitHub’s conventional commit guidelines for clear, descriptive commit messages.
- **Follow Official Documentation:**  
  - Adhere to Next.js, Stripe, Clerk, Neon.tech, and other official docs.
  - Stay updated with best practices for each technology.

## Syntax and Formatting
- **Functions:**  
  - Use the `function` keyword for pure functions.
  - Use concise conditionals (avoid unnecessary curly braces).
- **JSX:**  
  - Write declarative JSX for UI components.
- **Styling:**  
  - Always use TailwindCSS utility classes; avoid writing raw CSS when possible.

## UI and Styling
- **Component Libraries:**  
  - Use Shadcn/ui and Radix UI to ensure consistent design and accessibility.
  - Use Tremor for dashboard components and data visualization.
- **Responsive Design:**  
  - Implement mobile-first responsive layouts with TailwindCSS.
- **Accessibility:**  
  - Follow WCAG 2.1 guidelines.
  - Use Radix UI for accessible primitives and ensure focus, ARIA attributes, and keyboard navigation.

## Performance Optimization
- **Server vs. Client Components:**  
  - Favor React Server Components (RSC) and Next.js SSR for data fetching.
  - Limit the use of `use client` to only small components that access Web APIs.
- **Lazy Loading:**  
  - Dynamically load non-critical components.
- **Web Vitals:**  
  - Optimize for LCP, CLS, and FID.
- **Code Splitting:**  
  - Use Next.js dynamic imports for large or rarely-used components.

## Tools and Ecosystem
- **Package Manager:**  
  - Always use pnpm.
- **ORM & Database:**  
  - Use Drizzler with Neon.tech for database operations.
- **Authentication:**  
  - Use Clerk.com for all authentication needs.
- **UI Libraries:**  
  - Use Shadcn/ui, Radix UI, Tremor, and TailwindCSS.
- **Validation:**  
  - Use Zod for schema validation and error handling.
- **Stripe:**  
  - Follow Stripe’s best practices for payments, subscriptions, and webhooks.

## Documentation & Comments
- **Inline Documentation:**  
  - Document every module, function, and component using JSDoc with examples.
  - Ensure code examples are clear and up-to-date.
- **External Documentation:**  
  - Automatically generate MDX documentation files for each module.
  - Place generated MDX files (e.g., in `docs/api/`) so that platforms like Fumadocs or Mintlify can render them interactively.
  - Include a README.md in each folder to describe its purpose, usage instructions, and examples.

## General Commit and Workflow Guidelines
- **Commit Messages:**  
  - Follow conventional commits for clarity.
- **CI/CD:**  
  - Automate testing, linting, and documentation generation in your CI/CD pipeline.
- **Dependency Management:**  
  - Do not downgrade dependencies unless explicitly required.
- **Testing:**  
  - Write thorough unit, integration, and accessibility tests (e.g., using Jest, React Testing Library, axe‑core).
- **Security:**  
  - Always store secrets and credentials in `.env.local`.
  - Enforce best practices for API security and data privacy (e.g., GDPR, SOC 2, HIPAA when applicable).

## Final Remarks
- **Step-by-Step Planning:**  
  - Before writing code, outline your solution in detailed pseudocode.
  - Confirm the approach and plan before implementation.
- **Attention to Detail:**  
  - Be precise, thoughtful, and ensure your code adheres to best practices in every aspect (performance, accessibility, security, documentation).
- **Continuous Improvement:**  
  - Regularly review and update these rules based on evolving best practices and project needs.

