---
description: Documentation Rule: JSDoc + MDX Generation for Interactive Docs
globs: 
alwaysApply: false
---
# Documentation Organization & Maintenance Rule

> **Comprehensive rule for maintaining the hierarchical, priority-based documentation system in Eleva Care**

## üéØ Overview

This rule ensures all documentation follows the established organizational structure, maintains quality standards, and supports the team's development workflow.

## üìÅ Documentation Structure

### Folder Hierarchy

The documentation follows a **6-tier priority-based system**:

```
docs/
‚îú‚îÄ‚îÄ 01-getting-started/    # üî¥ Critical - New team member onboarding
‚îú‚îÄ‚îÄ 02-core-systems/       # üî¥ Critical - Main application systems  
‚îú‚îÄ‚îÄ 03-infrastructure/     # üü° High - DevOps, deployment, monitoring
‚îú‚îÄ‚îÄ 04-development/        # üü° High - Development practices, testing
‚îú‚îÄ‚îÄ 05-guides/            # üü¢ Medium - How-to guides, troubleshooting
‚îî‚îÄ‚îÄ archived/             # ‚ö™ Low - Historical reference only
```

### File Naming Convention

**Format**: `[priority-number]-[descriptive-name].md`

Examples:
- `01-quick-start.md`
- `02-payment-flow-analysis.md`
- `03-stripe-integration.md`

## ‚ú® Creating New Documentation

### 1. Determine Priority & Location

**Critical (01-02)**: Essential for system operation
- Getting started guides
- Core system implementations
- Authentication, payments, notifications

**High (03-04)**: Important for development
- Infrastructure setup
- Development standards
- Testing guidelines

**Medium (05)**: Helpful guides
- Troubleshooting procedures
- Feature guides
- Best practices

### 2. Use Standard Structure

```markdown
# üéØ [Document Title]

> **Brief description of what this document covers**

## üéØ Overview
- What this document covers
- Why it's important
- Prerequisites

## üìã Prerequisites
- Required knowledge
- Tools needed
- Dependencies

## üîß Implementation
- Step-by-step instructions
- Code examples
- Configuration details

## üí° Examples
- Practical use cases
- Code snippets
- Real-world scenarios

## üîç Troubleshooting
- Common issues
- Solutions
- Debugging steps

## üîó Related Documentation
- Links to related docs
- External resources
- References

---

**Last updated**: [Date] | **Next review**: [Date]
```

### 3. Add Navigation Links

Update parent `README.md` files to include new documentation:

```markdown
| Document | Purpose | Time to Read | Priority |
|----------|---------|--------------|----------|
| [new-doc.md](./new-doc.md) | Description | X min | üî¥ Critical |
```

## üîÑ Updating Existing Documentation

### Content Updates

1. **Check current status**: Ensure information is accurate
2. **Update timestamps**: Last updated and next review dates
3. **Verify links**: Ensure all internal/external links work
4. **Update examples**: Keep code examples current
5. **Review structure**: Maintain consistent formatting

### Structural Changes

1. **Moving documents**: Update all references and links
2. **Renaming files**: Follow naming convention
3. **Archiving**: Move outdated docs to `archived/` with explanation
4. **Cross-references**: Update related documentation

## üì¶ Archival Process

### When to Archive

- **Completed implementations**: Features fully implemented and stable
- **Superseded plans**: Planning docs replaced by actual implementations  
- **Deprecated features**: Removed or replaced functionality
- **Outdated guides**: Setup instructions no longer relevant

### Archive Structure

```
archived/
‚îú‚îÄ‚îÄ README.md                    # Archive index & guidelines
‚îú‚îÄ‚îÄ completed-implementations/   # Finished work for reference
‚îú‚îÄ‚îÄ outdated-plans/             # Superseded planning documents
‚îî‚îÄ‚îÄ deprecated-features/        # Removed functionality docs
```

### Archive Process

1. **Review relevance**: Confirm document should be archived
2. **Choose category**: Select appropriate archive subfolder
3. **Move document**: Transfer with clear naming
4. **Update archive README**: Add entry with explanation
5. **Fix broken links**: Update references in active docs
6. **Update navigation**: Remove from active navigation

## üìä Quality Standards

### Content Requirements

- **Clear objectives**: Each doc states its purpose
- **Consistent structure**: Follow standard template
- **Actionable content**: Include specific steps/examples
- **Up-to-date information**: Regular review schedule
- **Proper linking**: Cross-reference related documentation

### Technical Standards

- **Markdown formatting**: Consistent use of headers, lists, code blocks
- **Code examples**: Working, tested code snippets
- **File organization**: Proper folder placement and naming
- **Search optimization**: Clear titles and descriptions
- **Accessibility**: Good contrast, clear language

## üîç Maintenance Schedule

### Daily (During Development)

- Update documentation for new features
- Fix broken links discovered during development
- Add troubleshooting entries for new issues

### Weekly

- Review recently modified docs for accuracy
- Check links in frequently accessed documentation
- Update status in documentation tracking

### Monthly

- Review critical documentation (üî¥)
- Update examples and code snippets
- Check for missing documentation gaps

### Quarterly

- Comprehensive review of all active documentation
- Archive outdated content
- Update documentation structure if needed
- Review and update this rule

## üìù Writing Guidelines

### Style Guide

- **Tone**: Professional but approachable
- **Voice**: Second person ("you") for instructions
- **Tense**: Present tense for current features
- **Clarity**: Short sentences, clear explanations
- **Examples**: Concrete, working examples

### Technical Writing

- **Prerequisites**: Always list requirements upfront
- **Step-by-step**: Break complex processes into steps
- **Code blocks**: Use proper syntax highlighting
- **Screenshots**: Include when helpful for UI elements
- **Error handling**: Document common errors and solutions

### Accessibility

- **Headers**: Use hierarchical header structure (H1 > H2 > H3)
- **Alt text**: Describe images and screenshots
- **Link text**: Descriptive link text (not "click here")
- **Tables**: Use proper table headers
- **Lists**: Use appropriate list types (ordered/unordered)

## üîó Integration with Development

### Documentation in Pull Requests

When submitting PRs:

1. **Update related docs**: Modify affected documentation
2. **Add new docs**: Create documentation for new features
3. **Review impact**: Check if changes affect existing docs
4. **Link verification**: Ensure all links still work

### Feature Development Workflow

1. **Planning**: Document architecture/design decisions
2. **Implementation**: Update implementation docs during development
3. **Testing**: Document testing procedures and edge cases
4. **Deployment**: Update deployment and configuration docs
5. **Maintenance**: Create troubleshooting guides

## üö® Critical Documentation

### Must-Have Documentation

- **Quick Start Guide**: Get new developers running
- **API Overview**: Core API structure and usage
- **Payment System**: Critical for business operations
- **Authentication**: Security implementation
- **Database Schema**: Data structure and relationships

### Emergency Updates

For critical system changes:

1. **Immediate update**: Update docs during deployment
2. **Team notification**: Alert team to documentation changes
3. **Verification**: Confirm docs match actual implementation
4. **Rollback preparation**: Document rollback procedures

## üìà Documentation Metrics

### Health Indicators

- **Completeness**: All features have documentation
- **Accuracy**: Documentation matches implementation
- **Accessibility**: Easy to find and navigate
- **Freshness**: Regular updates and reviews
- **Usage**: Team actually uses the documentation

### Tracking

- Last updated dates on all documents
- Review schedule compliance
- Link health checks
- User feedback and questions
- Documentation coverage for new features

## üõ†Ô∏è Tools & Automation

### Recommended Tools

- **Link checking**: Automated broken link detection
- **Spell checking**: Grammar and spelling verification
- **Format checking**: Consistent markdown formatting
- **Reference tracking**: Cross-reference validation

### Automation Opportunities

- **Auto-generation**: API documentation from code
- **Template scaffolding**: New doc creation templates
- **Update reminders**: Scheduled review notifications
- **Link validation**: Continuous link health monitoring

## üìû Support & Questions

### Getting Help

- **Missing documentation**: Create GitHub issue with "documentation" label
- **Unclear instructions**: Ask in team chat or create issue
- **Documentation errors**: Submit PR with corrections
- **Structure questions**: Consult this rule or ask team lead

### Contributing

- **Follow this rule**: Use established structure and standards
- **Review process**: All documentation changes need review
- **Consistency**: Maintain established patterns and style
- **Quality**: Ensure accuracy and completeness

---

**Rule Version**: 1.0 | **Last Updated**: January 1, 2025 | **Next Review**: April 1, 2025
